# handlers/story_creation_fsm.py
import logging
from typing import Dict, Any, TYPE_CHECKING, Union, Optional, List # Added List
from datetime import datetime, timezone

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.utils.markdown import hbold

from utils.navigation import navigation # For "Back to Main Menu" button on cancel
from services.memory_service import MemoryType # For saving the generated story

if TYPE_CHECKING:
    from main import AICompanionBot
    from services.llm_service import LLMService
    # from services.memory_service import MemoryService # Already imported

logger = logging.getLogger(__name__)
story_fsm_router = Router()

class StoryCreationFSM(StatesGroup):
    """Defines FSM states for the story creation process."""
    waiting_for_genre = State()
    waiting_for_hero_description = State()
    waiting_for_setting_description = State()
    waiting_for_plot_problem = State()
    waiting_for_key_elements = State()
    waiting_for_story_tone = State()
    waiting_for_story_style = State() # For selecting narrative or conversational style
    confirm_story_details = State()
    story_generated_waiting_feedback = State()

# --- Keyboards ---
def get_fsm_cancel_keyboard(back_to_confirm_callback: Optional[str] = None) -> types.InlineKeyboardMarkup:
    """Creates a keyboard with a 'Cancel' button and optionally a 'Back to Confirmation' button."""
    buttons = [[types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="fsm_story_cancel")]]
    if back_to_confirm_callback: # Add "Back" button if callback is provided
        buttons.insert(0, [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é", callback_data=back_to_confirm_callback)])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_story_style_keyboard() -> types.InlineKeyboardMarkup:
    """Returns a keyboard for selecting the story's narrative style."""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìñ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ", callback_data="fsm_story_style_narrative")],
        [types.InlineKeyboardButton(text="üí¨ –î–∏–Ω–∞–º–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥/—á–∞—Ç", callback_data="fsm_story_style_conversational")],
        [types.InlineKeyboardButton(text="‚ú® –ù–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ AI", callback_data="fsm_story_style_auto")],
        [types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="fsm_story_cancel")]
    ])

def get_story_confirmation_keyboard() -> types.InlineKeyboardMarkup:
    """Creates a keyboard for the story details confirmation step."""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="fsm_story_generate")],
        # Edit buttons for each parameter
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ñ–∞–Ω—Ä", callback_data="fsm_story_edit_genre"),
         types.InlineKeyboardButton(text="‚úèÔ∏è –ì–µ—Ä–æ–π", callback_data="fsm_story_edit_hero")],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –°–µ—Ç—Ç–∏–Ω–≥", callback_data="fsm_story_edit_setting"),
         types.InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–±–ª–µ–º–∞", callback_data="fsm_story_edit_problem")],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –≠–ª–µ–º–µ–Ω—Ç—ã", callback_data="fsm_story_edit_elements"),
         types.InlineKeyboardButton(text="‚úèÔ∏è –¢–æ–Ω", callback_data="fsm_story_edit_tone")],
        [types.InlineKeyboardButton(text="‚úèÔ∏è –°—Ç–∏–ª—å", callback_data="fsm_story_edit_style")],
        [types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="fsm_story_cancel")]
    ])

def get_story_feedback_keyboard() -> types.InlineKeyboardMarkup:
    """Creates a keyboard for providing feedback after story generation."""
    buttons = [
        [types.InlineKeyboardButton(text="üéâ –û—Ç–ª–∏—á–Ω–æ!", callback_data="fsm_story_feedback_good"),
         types.InlineKeyboardButton(text="ü§î –ú–æ–∂–Ω–æ –ª—É—á—à–µ", callback_data="fsm_story_feedback_improve")],
        [types.InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∏—Å—Ç–æ—Ä–∏—é", callback_data="fsm_story_save_generated")],
        [types.InlineKeyboardButton(text="üè° –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav_main")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

# --- FSM Cancel Handlers ---
@story_fsm_router.message(Command("cancel_story"), StateFilter(StoryCreationFSM))
@story_fsm_router.callback_query(F.data == "fsm_story_cancel", StateFilter(StoryCreationFSM))
async def cancel_story_creation_handler(event: Union[types.Message, types.CallbackQuery], state: FSMContext, bot_instance: 'AICompanionBot'):
    """Handles cancellation of the story creation FSM."""
    current_state_str = await state.get_state()
    user_id = event.from_user.id
    logger.info(f"User {user_id} cancelled story creation at step {current_state_str}")
    await state.clear()
    cancel_message_text = "–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    # Provide a button to go back to the main menu
    main_menu_button = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üè° –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav_main")]
    ])
    if isinstance(event, types.CallbackQuery) and event.message:
        try:
            await event.message.edit_text(cancel_message_text, reply_markup=main_menu_button)
        except Exception as e: # Fallback if edit fails
            logger.warning(f"Could not edit message on FSM cancel: {e}")
            await event.message.answer(cancel_message_text, reply_markup=main_menu_button)
        await event.answer()
    elif isinstance(event, types.Message):
        await event.answer(cancel_message_text, reply_markup=main_menu_button)

# --- Helper function to request next FSM step ---
async def request_next_step(
    target_message_event: Union[types.Message, types.CallbackQuery],
    state: FSMContext,
    next_fsm_state: State,
    prompt_text: str,
    bot_instance: 'AICompanionBot', # bot_instance is needed for sending messages
    reply_markup_override: Optional[types.InlineKeyboardMarkup] = None,
    edit_mode: bool = False # To show "Back to confirmation" button
):
    """Sets the next FSM state and sends/edits the prompt message to the user."""
    await state.set_state(next_fsm_state)
    final_reply_markup = reply_markup_override if reply_markup_override is not None \
                         else get_fsm_cancel_keyboard("fsm_story_back_to_confirm" if edit_mode else None)

    message_to_handle: Optional[types.Message] = None
    if isinstance(target_message_event, types.CallbackQuery):
        message_to_handle = target_message_event.message
    elif isinstance(target_message_event, types.Message):
        message_to_handle = target_message_event

    if not message_to_handle:
        logger.error("request_next_step: Could not determine message to reply/edit.")
        if isinstance(target_message_event, types.CallbackQuery):
            await target_message_event.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞.", show_alert=True)
        return

    try:
        # Edit if it's a callback query or if the target message is from the bot itself. Otherwise, send a new message.
        can_edit = isinstance(target_message_event, types.CallbackQuery) or \
                   (hasattr(message_to_handle, 'from_user') and message_to_handle.from_user and message_to_handle.from_user.is_bot)
        
        if can_edit:
            await message_to_handle.edit_text(prompt_text, reply_markup=final_reply_markup, parse_mode="Markdown")
        else:
            await message_to_handle.answer(prompt_text, reply_markup=final_reply_markup, parse_mode="Markdown")
    except Exception as e: # Fallback if edit/answer fails
        logger.warning(f"Error in request_next_step during edit/answer: {e}. Sending new message as fallback.")
        chat_id_to_send = message_to_handle.chat.id
        await bot_instance.bot.send_message(chat_id_to_send, prompt_text, reply_markup=final_reply_markup, parse_mode="Markdown")

    if isinstance(target_message_event, types.CallbackQuery):
        await target_message_event.answer()


# --- FSM Start ---
async def start_story_creation(target_message_event: Union[types.Message, types.CallbackQuery], state: FSMContext, bot_instance: 'AICompanionBot'):
    """Initiates the story creation FSM."""
    await state.clear() # Clear any previous FSM data for this user
    await request_next_step(
        target_message_event, state, StoryCreationFSM.waiting_for_genre,
        hbold("üìö –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –≤–º–µ—Å—Ç–µ!") + "\n\n"
        "–°–Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, **–æ–ø–∏—à–∏—Ç–µ –∂–∞–Ω—Ä** –≤–∞—à–µ–π –±—É–¥—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ñ—ç–Ω—Ç–µ–∑–∏, –Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –¥–µ—Ç–µ–∫—Ç–∏–≤, —Ä–æ–º–∞–Ω—Ç–∏–∫–∞, —Ö–æ—Ä—Ä–æ—Ä, —é–º–æ—Ä, —ç—Ä–æ—Ç–∏–∫–∞).",
        bot_instance=bot_instance
    )

# --- State Handlers ---

@story_fsm_router.message(StoryCreationFSM.waiting_for_genre, F.text)
async def process_genre_handler(message: types.Message, state: FSMContext, bot_instance: 'AICompanionBot'):
    """Processes the genre input from the user."""
    if not message.text or not message.text.strip():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∂–∞–Ω—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.")
        return
    genre = message.text.strip()
    await state.update_data(genre=genre)
    logger.info(f"User {message.from_user.id} (Story FSM): Genre - '{genre}'")
    await request_next_step(
        message, state, StoryCreationFSM.waiting_for_hero_description,
        f"üëç –ñ–∞–Ω—Ä: {hbold(genre)}\n\n–¢–µ–ø–µ—Ä—å **–æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è**: –µ–≥–æ –∏–º—è, —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –≤–Ω–µ—à–Ω–æ—Å—Ç—å, –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é.",
        bot_instance=bot_instance
    )

# ... (process_hero_handler, process_setting_handler, process_problem_handler, process_elements_handler - similar structure, comments refined) ...
@story_fsm_router.message(StoryCreationFSM.waiting_for_hero_description, F.text)
async def process_hero_handler(message: types.Message, state: FSMContext, bot_instance: 'AICompanionBot'):
    if not message.text or not message.text.strip():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–µ—Ä–æ—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.")
        return
    hero = message.text.strip()
    await state.update_data(hero=hero)
    logger.info(f"User {message.from_user.id} (Story FSM): Hero - '{hero[:50]}...'")
    await request_next_step(
        message, state, StoryCreationFSM.waiting_for_setting_description,
        "üë§ –ì–µ—Ä–æ–π –æ–ø–∏—Å–∞–Ω.\n\n**–ì–¥–µ –∏ –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è?** –û–ø–∏—à–∏—Ç–µ –º–∏—Ä, –ª–æ–∫–∞—Ü–∏—é, —ç–ø–æ—Ö—É –∏–ª–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Å–µ—Ç—Ç–∏–Ω–≥–∞.",
        bot_instance=bot_instance
    )

@story_fsm_router.message(StoryCreationFSM.waiting_for_setting_description, F.text)
async def process_setting_handler(message: types.Message, state: FSMContext, bot_instance: 'AICompanionBot'):
    if not message.text or not message.text.strip():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ç—Ç–∏–Ω–≥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.")
        return
    setting = message.text.strip()
    await state.update_data(setting=setting)
    logger.info(f"User {message.from_user.id} (Story FSM): Setting - '{setting[:50]}...'")
    await request_next_step(
        message, state, StoryCreationFSM.waiting_for_plot_problem,
        "üåç –ú–∏—Ä —Å–æ–∑–¥–∞–Ω.\n\n**–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –∫–æ–Ω—Ñ–ª–∏–∫—Ç, —Ü–µ–ª—å –∏–ª–∏ –∑–∞–≥–∞–¥–∫–∞** –±—É–¥–µ—Ç –¥–≤–∏–≥–∞—Ç—å —Å—é–∂–µ—Ç –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏?",
        bot_instance=bot_instance
    )

@story_fsm_router.message(StoryCreationFSM.waiting_for_plot_problem, F.text)
async def process_problem_handler(message: types.Message, state: FSMContext, bot_instance: 'AICompanionBot'):
    if not message.text or not message.text.strip():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã/–∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.")
        return
    problem = message.text.strip()
    await state.update_data(problem=problem)
    logger.info(f"User {message.from_user.id} (Story FSM): Problem - '{problem[:50]}...'")
    await request_next_step(
        message, state, StoryCreationFSM.waiting_for_key_elements,
        "üî• –ò–Ω—Ç—Ä–∏–≥–∞ –∑–∞–ª–æ–∂–µ–Ω–∞.\n\n–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ **–Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–ª–∏ —Å–æ–±—ã—Ç–∏–π**, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –≤–µ—Ä–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –≤—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä–∞–∫–æ–Ω–æ–º).",
        bot_instance=bot_instance
    )

@story_fsm_router.message(StoryCreationFSM.waiting_for_key_elements, F.text)
async def process_elements_handler(message: types.Message, state: FSMContext, bot_instance: 'AICompanionBot'):
    if not message.text or not message.text.strip():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.")
        return
    elements = message.text.strip()
    await state.update_data(elements=elements)
    logger.info(f"User {message.from_user.id} (Story FSM): Elements - '{elements[:50]}...'")
    await request_next_step(
        message, state, StoryCreationFSM.waiting_for_story_tone,
        "‚ú® –î–µ—Ç–∞–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n–ó–∞–¥–∞–π—Ç–µ **—Ç–æ–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ** –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, –º—Ä–∞—á–Ω—ã–π, —ç–ø–∏—á–µ—Å–∫–∏–π, —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π, –∑–∞–≥–∞–¥–æ—á–Ω—ã–π, —ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π).",
        bot_instance=bot_instance
    )

@story_fsm_router.message(StoryCreationFSM.waiting_for_story_tone, F.text)
async def process_tone_handler(message: types.Message, state: FSMContext, bot_instance: 'AICompanionBot'):
    """Processes the story tone input and moves to style selection."""
    if not message.text or not message.text.strip():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–Ω –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.")
        return
    tone = message.text.strip()
    await state.update_data(tone=tone)
    logger.info(f"User {message.from_user.id} (Story FSM): Tone - '{tone}'.")
    await request_next_step(
        message, state, StoryCreationFSM.waiting_for_story_style,
        f"üé® –¢–æ–Ω: {hbold(tone)}.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ **—Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏**:",
        reply_markup_override=get_story_style_keyboard(), # Provide style selection keyboard
        bot_instance=bot_instance
    )

@story_fsm_router.callback_query(StateFilter(StoryCreationFSM.waiting_for_story_style), F.data.startswith("fsm_story_style_"))
async def process_style_callback_handler(callback: types.CallbackQuery, state: FSMContext, bot_instance: 'AICompanionBot'):
    """Processes the story style selection from callback query."""
    if not callback.message: return await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    
    style_choice = callback.data.split("fsm_story_style_")[-1]
    style_display_names = { # For user-facing display
        "narrative": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ", "conversational": "–î–∏–Ω–∞–º–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥/—á–∞—Ç", "auto": "–ù–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ AI"
    }
    selected_style_display = style_display_names.get(style_choice, style_choice.capitalize())

    await state.update_data(story_style=style_choice) # Store technical name
    logger.info(f"User {callback.from_user.id} (Story FSM): Style - '{style_choice}' ({selected_style_display}). Moving to confirmation.")
    await show_confirmation_details(callback, state, bot_instance)
    # callback.answer() is called within show_confirmation_details if it's a callback

# --- Confirmation and Editing Step ---
async def show_confirmation_details(
    message_or_callback_event: Union[types.Message, types.CallbackQuery],
    state: FSMContext,
    bot_instance: 'AICompanionBot'
):
    """Displays all collected story details for user confirmation."""
    story_data = await state.get_data()
    style_tech_name = story_data.get('story_style', 'auto')
    style_display_names = {
        "narrative": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ", "conversational": "–î–∏–Ω–∞–º–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥/—á–∞—Ç", "auto": "–ù–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ AI"
    }
    style_display = style_display_names.get(style_tech_name, style_tech_name.capitalize())

    confirmation_text = hbold("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –±—É–¥—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏:") + "\n\n"
    confirmation_text += f"**–ñ–∞–Ω—Ä:** {story_data.get('genre', hbold('–Ω–µ —É–∫–∞–∑–∞–Ω'))}\n"
    confirmation_text += f"**–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π:** {story_data.get('hero', hbold('–Ω–µ –æ–ø–∏—Å–∞–Ω'))[:200]}...\n" # Preview long text
    confirmation_text += f"**–°–µ—Ç—Ç–∏–Ω–≥:** {story_data.get('setting', hbold('–Ω–µ –æ–ø–∏—Å–∞–Ω'))[:200]}...\n"
    confirmation_text += f"**–ü—Ä–æ–±–ª–µ–º–∞/–ö–æ–Ω—Ñ–ª–∏–∫—Ç:** {story_data.get('problem', hbold('–Ω–µ —É–∫–∞–∑–∞–Ω–∞'))[:200]}...\n"
    confirmation_text += f"**–ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:** {story_data.get('elements', hbold('–Ω–µ —É–∫–∞–∑–∞–Ω—ã'))[:200]}...\n"
    confirmation_text += f"**–¢–æ–Ω –∏—Å—Ç–æ—Ä–∏–∏:** {story_data.get('tone', hbold('–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π'))}\n"
    confirmation_text += f"**–°—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è:** {hbold(style_display)}\n\n"
    confirmation_text += "–í—Å—ë –≤–µ—Ä–Ω–æ? –ò–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?"

    target_message = message_or_callback_event.message if isinstance(message_or_callback_event, types.CallbackQuery) else message_or_callback_event
    
    await state.set_state(StoryCreationFSM.confirm_story_details)
    try:
        await target_message.edit_text(confirmation_text, reply_markup=get_story_confirmation_keyboard(), parse_mode="Markdown")
    except Exception: # Fallback if edit fails
        await target_message.answer(confirmation_text, reply_markup=get_story_confirmation_keyboard(), parse_mode="Markdown")
    
    if isinstance(message_or_callback_event, types.CallbackQuery):
        await message_or_callback_event.answer()

@story_fsm_router.callback_query(F.data.startswith("fsm_story_edit_"), StateFilter(StoryCreationFSM.confirm_story_details))
async def edit_story_detail_handler(callback: types.CallbackQuery, state: FSMContext, bot_instance: 'AICompanionBot'):
    """Handles requests to edit a specific detail of the story."""
    if not callback.message: return await callback.answer("–û—à–∏–±–∫–∞")
    
    edit_action = callback.data.split("fsm_story_edit_")[-1]
    # Prompts and target states for editing each detail
    edit_prompts = {
        "genre": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π **–∂–∞–Ω—Ä**:", "hero": "‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ **–≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è** –ø–æ-–Ω–æ–≤–æ–º—É:",
        "setting": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ **—Å–µ—Ç—Ç–∏–Ω–≥–∞**:", "problem": "‚úèÔ∏è –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ **–ø—Ä–æ–±–ª–µ–º—É/–∫–æ–Ω—Ñ–ª–∏–∫—Ç** –∏–Ω–∞—á–µ:",
        "elements": "‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ **–∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã**:", "tone": "‚úèÔ∏è –ó–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π **—Ç–æ–Ω** –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏:",
        "style": "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π **—Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è**:"
    }
    target_states = {
        "genre": StoryCreationFSM.waiting_for_genre, "hero": StoryCreationFSM.waiting_for_hero_description,
        "setting": StoryCreationFSM.waiting_for_setting_description, "problem": StoryCreationFSM.waiting_for_plot_problem,
        "elements": StoryCreationFSM.waiting_for_key_elements, "tone": StoryCreationFSM.waiting_for_story_tone,
        "style": StoryCreationFSM.waiting_for_story_style
    }

    if edit_action in edit_prompts and edit_action in target_states:
        await state.update_data(_is_editing_from_confirm=True) # Flag to return to confirmation
        reply_markup_for_edit = get_story_style_keyboard() if edit_action == "style" else None
        await request_next_step(
            callback, state, target_states[edit_action],
            edit_prompts[edit_action], bot_instance=bot_instance,
            reply_markup_override=reply_markup_for_edit,
            edit_mode=True # To show "Back to Confirmation" button
        )
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", show_alert=True)

@story_fsm_router.callback_query(F.data == "fsm_story_back_to_confirm", StateFilter(StoryCreationFSM))
async def back_to_confirmation_handler(callback: types.CallbackQuery, state: FSMContext, bot_instance: 'AICompanionBot'):
    """Handles returning to the confirmation step after editing a detail."""
    if not callback.message: return await callback.answer("–û—à–∏–±–∫–∞")
    await state.update_data(_is_editing_from_confirm=False) # Reset edit flag
    await show_confirmation_details(callback, state, bot_instance)

# --- Story Generation ---
@story_fsm_router.callback_query(F.data == "fsm_story_generate", StateFilter(StoryCreationFSM.confirm_story_details))
async def generate_story_handler(callback: types.CallbackQuery, state: FSMContext, bot_instance: 'AICompanionBot'):
    """Generates the story based on collected details."""
    if not callback.message or not callback.from_user : return await callback.answer("–û—à–∏–±–∫–∞")
    
    user_id_tg = callback.from_user.id
    logger.info(f"User {user_id_tg} (Story FSM): Confirmed details. Starting story generation.")
    story_data = await state.get_data()
    
    try: # Attempt to edit message to show "generating" status
        await callback.message.edit_text(
            "‚è≥ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø–∏—à–µ—Ç—Å—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. üßô‚Äç‚ôÇÔ∏è‚ú®",
            reply_markup=None # Remove buttons during generation
        )
    except Exception as e:
        logger.warning(f"Could not edit message before story generation: {e}")
        await callback.message.answer("‚è≥ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø–∏—à–µ—Ç—Å—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. üßô‚Äç‚ôÇÔ∏è‚ú®")

    current_persona = await bot_instance._get_current_persona(user_id_tg)
    llm_service: 'LLMService' = bot_instance.llm_service

    story_style = story_data.get('story_style', 'auto')
    style_display_names = { # For prompt construction
        "narrative": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ", "conversational": "–î–∏–Ω–∞–º–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥/—á–∞—Ç", "auto": "–ù–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ AI"
    }
    dynamic_llm_context = {"user_name": callback.from_user.first_name or "—á–∏—Ç–∞—Ç–µ–ª—å"}
    if story_style != 'auto': # Pass sexting_mode for narrative/conversational styles
        dynamic_llm_context["sexting_mode"] = story_style 
    
    # Construct the prompt for LLM
    prompt_parts = [
        f"–¢—ã ‚Äî {current_persona}, —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫. –ù–∞–ø–∏—à–∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({dynamic_llm_context.get('user_name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}):",
        f"1. –ñ–∞–Ω—Ä: {story_data.get('genre', '–Ω–µ —É–∫–∞–∑–∞–Ω')}.",
        f"2. –ì–µ—Ä–æ–π: {story_data.get('hero', '–Ω–µ –æ–ø–∏—Å–∞–Ω')}. –†–∞—Å–∫—Ä–æ–π –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä.",
        f"3. –°–µ—Ç—Ç–∏–Ω–≥: {story_data.get('setting', '–Ω–µ –æ–ø–∏—Å–∞–Ω–æ')}. –°–æ–∑–¥–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.",
        f"4. –ü—Ä–æ–±–ª–µ–º–∞/–¶–µ–ª—å: {story_data.get('problem', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}. –≠—Ç–æ —è–¥—Ä–æ —Å—é–∂–µ—Ç–∞.",
        f"5. –ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {story_data.get('elements', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')}.",
        f"6. –¢–æ–Ω: {story_data.get('tone', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π')}.",
        f"7. –°—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è: {style_display_names.get(story_style, style_style.capitalize())} (–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è LLM: {'narrative' if story_style == 'narrative' else 'conversational' if story_style == 'conversational' else '–ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π'}).",
        "\n**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:** –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —è—Ä–∫–∏–π —è–∑—ã–∫, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ). –£—á—Ç–∏ —Å—Ç–∏–ª—å –ø–µ—Ä—Å–æ–Ω—ã '{current_persona}' –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –µ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞. –û–±—ä–µ–º: 500-1500 —Å–ª–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–±–∑–∞—Ü–µ–≤)."
    ]
    prompt_for_llm = "\n".join(prompt_parts)
    
    try:
        generated_story_text = await llm_service.generate_response(
            user_message=prompt_for_llm, persona=current_persona, context_messages=[],
            dynamic_context_info=dynamic_llm_context,
            max_output_tokens=bot_instance.config.llm_max_output_tokens, temperature=0.75 
        )
        
        await state.update_data(generated_story_text=generated_story_text, story_params=story_data) 
        await state.set_state(StoryCreationFSM.story_generated_waiting_feedback)

        if generated_story_text:
            # Handle long messages by splitting
            max_len = 4000 # Telegram message length limit (approx)
            story_header = hbold("üìñ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞:") + "\n\n"
            full_display_text = story_header + generated_story_text
            
            if len(full_display_text) > max_len :
                await callback.message.answer(hbold("üìñ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞! –û–Ω–∞ –ø–æ–ª—É—á–∏–ª–∞—Å—å –¥–æ–≤–æ–ª—å–Ω–æ –æ–±—ä–µ–º–Ω–æ–π, –ø–æ—ç—Ç–æ–º—É —è —Ä–∞–∑–¥–µ–ª—é –µ–µ –Ω–∞ —á–∞—Å—Ç–∏:"))
                parts: List[str] = []
                remaining_text = generated_story_text
                while len(remaining_text) > 0:
                    # Determine chunk size, considering header for the first part
                    current_header_len = len(story_header) if not parts else 0
                    chunk_max_len = max_len - current_header_len - 20 # -20 for "..." and safety margin
                    if len(remaining_text) <= chunk_max_len:
                        parts.append(remaining_text); break
                    
                    chunk = remaining_text[:chunk_max_len]
                    # Try to split at a good point (newline or space)
                    split_pos = max(chunk.rfind('\n'), chunk.rfind(' '))
                    if split_pos == -1 or len(chunk) - split_pos > 150: # If no good split point or it's too far back
                        split_pos = len(chunk) # Force split
                    
                    parts.append(chunk[:split_pos] + ("..." if len(remaining_text[split_pos:]) > 0 else ""))
                    remaining_text = remaining_text[split_pos:].lstrip()

                for i, part_text in enumerate(parts):
                    current_header_to_send = story_header if i == 0 else ""
                    is_last_part = (i == len(parts) - 1)
                    await callback.message.answer(
                        current_header_to_send + part_text, 
                        reply_markup=get_story_feedback_keyboard() if is_last_part else None,
                        parse_mode="Markdown"
                    )
                    if not is_last_part: await asyncio.sleep(0.5) # Small delay between parts
            else: # Story fits in one message
                await callback.message.answer(full_display_text, reply_markup=get_story_feedback_keyboard(), parse_mode="Markdown")
        else: # No story generated
            await callback.message.answer(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
                reply_markup=get_story_feedback_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user {user_id_tg}: {e}", exc_info=True)
        error_id = bot_instance.error_handler_instance.log_error(e, context={'user_id_tg': user_id_tg, 'fsm_step': 'generation'})
        await callback.message.answer(f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ (–ö–æ–¥: `{error_id}`). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="Markdown")
        await state.clear()
    await callback.answer()


# --- Feedback and Save Handlers ---
@story_fsm_router.callback_query(F.data.in_({"fsm_story_feedback_good", "fsm_story_feedback_improve"}), StateFilter(StoryCreationFSM.story_generated_waiting_feedback))
async def story_feedback_handler(callback: types.CallbackQuery, state: FSMContext, bot_instance: 'AICompanionBot'):
    """Handles user feedback on the generated story."""
    if not callback.message or not callback.from_user: return await callback.answer()
    
    feedback_type = callback.data.split('_')[-1] # "good" or "improve"
    user_id_tg = callback.from_user.id
    story_data_from_state = await state.get_data()
    story_params = story_data_from_state.get('story_params', {})

    logger.info(f"User {user_id_tg} provided story feedback: {feedback_type}. Params: {story_params.get('genre')}, Tone: {story_params.get('tone')}, Style: {story_params.get('story_style')}")

    db_user = await bot_instance.db_service.get_user_by_telegram_id(user_id_tg)
    if db_user: # Log statistic if user exists
        await bot_instance.db_service.save_statistic(
            metric_name=f"story_feedback", metric_value=1.0 if feedback_type == "good" else 0.0,
            user_id=db_user.id, 
            additional_data={
                'feedback_type': feedback_type, 'genre': story_params.get('genre'),
                'tone': story_params.get('tone'), 'style': story_params.get('story_style')
            }
        )
    response_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! ‚ù§Ô∏è –†–∞–¥, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!" if feedback_type == "good" else "–°–ø–∞—Å–∏–±–æ! –Ø —É—á—Ç—É –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö —Ç–≤–æ—Ä–µ–Ω–∏–π. üßê"
    try: # Attempt to edit the message containing the story or feedback buttons
        current_message_text = callback.message.text or "" 
        # Append feedback response, ensuring not to exceed message limits
        if len(current_message_text) + len(response_text) + 20 < 4096: # +20 for formatting and newline
             await callback.message.edit_text(f"{current_message_text.split('–ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç?')[0].strip()}\n\n*{response_text}*", reply_markup=get_story_feedback_keyboard(), parse_mode="Markdown")
        else: 
            await callback.message.reply(f"*{response_text}*", parse_mode="Markdown")
    except Exception as e: # Fallback if edit fails
        logger.warning(f"Could not edit message with feedback: {e}")
        await callback.message.reply(f"*{response_text}*", parse_mode="Markdown")
    await callback.answer()

@story_fsm_router.callback_query(F.data == "fsm_story_save_generated", StateFilter(StoryCreationFSM.story_generated_waiting_feedback))
async def save_generated_story_handler(callback: types.CallbackQuery, state: FSMContext, bot_instance: 'AICompanionBot'):
    """Saves the generated story to the user's memory."""
    if not callback.message or not callback.from_user: return await callback.answer("–û—à–∏–±–∫–∞")

    user_id_tg = callback.from_user.id
    story_data_from_state = await state.get_data()
    generated_story_text = story_data_from_state.get("generated_story_text")
    story_params = story_data_from_state.get("story_params", {})
    
    if not generated_story_text:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", show_alert=True); return

    memory_service: 'MemoryService' = bot_instance.memory_service
    current_persona = await bot_instance._get_current_persona(user_id_tg)

    story_title = f"–ò—Å—Ç–æ—Ä–∏—è: {story_params.get('genre', '–†–∞—Å—Å–∫–∞–∑')} ({datetime.now(timezone.utc).strftime('%d.%m.%Y %H:%M')})"
    # Prepare content for saving, including parameters
    story_content_for_saving = f"**{story_title}**\n\n{generated_story_text}\n\n"
    story_content_for_saving += "*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è:*\n" + \
                                f"- –ñ–∞–Ω—Ä: {story_params.get('genre', '-')}\n" + \
                                f"- –°—Ç–∏–ª—å: {story_params.get('story_style', 'auto').capitalize()}\n" + \
                                f"- –¢–æ–Ω: {story_params.get('tone', '-')}"
    
    try:
        saved_item = await memory_service.save_memory(
            user_id_tg=user_id_tg, persona=current_persona, 
            content=story_content_for_saving,
            memory_content_type=MemoryType.GENERATED_STORY.value, # Specific type for generated stories
            tags=["—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è_–∏—Å—Ç–æ—Ä–∏—è", story_params.get('genre', 'unknown_genre').lower().replace(" ", "_")]
        )
        if saved_item:
            await callback.answer("–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à—É –ø–∞–º—è—Ç—å (—Ä–∞–∑–¥–µ–ª '–°–æ–±—ã—Ç–∏—è' –∏–ª–∏ '–ò–Ω—Å–∞–π—Ç—ã')!", show_alert=True)
            logger.info(f"User {user_id_tg} saved generated story (Memory ID {saved_item.id})")
            await state.clear() 
            
            main_menu_button = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üè° –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav_main")]
            ])
            try: # Edit the original story message to indicate it's saved
                 original_story_display_text = callback.message.text or (hbold("üìñ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞:") + "\n\n" + generated_story_text[:100]+"...")
                 final_text = f"{original_story_display_text.split('–ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç?')[0].strip()}\n\n*–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à—É –ø–∞–º—è—Ç—å.*"
                 await callback.message.edit_text(final_text, reply_markup=main_menu_button, parse_mode="Markdown")
            except Exception as e_edit:
                 logger.warning(f"Could not edit message after saving story: {e_edit}")
                 await callback.message.answer("–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=main_menu_button) # Send new message as fallback
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    except Exception as e:
        logger.error(f"Error saving generated story for user {user_id_tg}: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.", show_alert=True)

# --- Fallback Handler for incorrect input within FSM ---
@story_fsm_router.message(StateFilter(StoryCreationFSM)) # Catches any message in any StoryCreationFSM state
async def incorrect_input_in_story_fsm_handler(message: types.Message, state: FSMContext, bot_instance: 'AICompanionBot'):
    """Handles unexpected text messages during the FSM progression."""
    data = await state.get_data()
    is_editing_from_confirm = data.get('_is_editing_from_confirm', False)
    current_fsm_state_name = await state.get_state()
    
    reply_markup_to_use = get_fsm_cancel_keyboard("fsm_story_back_to_confirm" if is_editing_from_confirm else None)
    prompt_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏."
    
    # If waiting for a button press (like style selection), remind the user
    if current_fsm_state_name == StoryCreationFSM.waiting_for_story_style.state:
        prompt_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'."
        reply_markup_to_use = get_story_style_keyboard()

    await message.reply(
        f"–•–º, –∫–∞–∂–µ—Ç—Å—è, —è –æ–∂–∏–¥–∞–ª –Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ. {prompt_message}",
        reply_markup=reply_markup_to_use
    )
