# handlers/payment_handlers.py
import logging
import json
import hashlib
from datetime import datetime, timezone
from typing import Dict, Any, TYPE_CHECKING, Union, Optional, List

from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.utils.markdown import hbold, hitalic
from aiogram.exceptions import TelegramAPIError

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from config.settings import BotConfig
from services.subscription_system import SubscriptionService, SubscriptionTier, UserSubscriptionData, SubscriptionStatus
from services.promocode_system import PromoCodeService, ValidationError as PromoCodeValidationError, PromoCode as DataClassPromoCode, PromoCodeDiscountType
from services.referral_ab_testing import ReferralService # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from utils.navigation import navigation
from utils.error_handler import handle_errors, ErrorHandler

if TYPE_CHECKING:
    from main import AICompanionBot
    # from services.achievement_service import AchievementService # –ü—Ä–∏–º–µ—Ä –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    # from services.personalization_service import PersonalizationService # –ü—Ä–∏–º–µ—Ä
    # from services.marketing_service import MarketingService # –ü—Ä–∏–º–µ—Ä

logger = logging.getLogger(__name__)
payment_router = Router()

# --- FSM –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ---
class PromoCodeFSM(StatesGroup):
    """States for the FSM of entering a promo code before payment."""
    waiting_for_code_entry = State()
    code_applied_waiting_payment_confirmation = State()

# --- –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Payload ---

def get_subscription_payload(user_id_tg: int, tier_value: str,
                           duration_months: int, payment_payload_secret: str,
                           promocode: Optional[str] = None) -> str:
    """
    Generate unique tracking payload for payment.
    Uses a secret key from BotConfig for signature.
    """
    payload_data = {
        "user_id_tg": user_id_tg,
        "tier_value": tier_value,
        "duration_months": duration_months,
        "promocode": promocode,
        "timestamp": int(datetime.now(timezone.utc).timestamp()),
        "version": "1.0"
    }
    payload_json = json.dumps(payload_data, sort_keys=True, ensure_ascii=False)
    if not payment_payload_secret:
        logger.critical("PAYMENT_PAYLOAD_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏! –ü–æ–¥–ø–∏—Å—å payload –Ω–µ –±—É–¥–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–π.")
        signature_input = payload_json + "TEMPORARY_FALLBACK_SECRET_CHANGE_ME"
    else:
        signature_input = payload_json + payment_payload_secret
    signature = hashlib.sha256(signature_input.encode('utf-8')).hexdigest()[:16]
    payload_data["sig"] = signature
    return json.dumps(payload_data, ensure_ascii=False)

def parse_subscription_payload(payload_str: str, payment_payload_secret: str) -> Optional[Dict[str, Any]]:
    """
    Parse and validate payment payload.
    Uses a secret key from BotConfig for signature verification.
    """
    try:
        data = json.loads(payload_str)
        signature = data.pop("sig", None)
        if signature is None:
            logger.warning(f"Payload signature missing: {payload_str}")
            return None
        payload_json = json.dumps(data, sort_keys=True, ensure_ascii=False)
        if not payment_payload_secret:
            logger.critical("PAYMENT_PAYLOAD_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ payload!")
            expected_signature_input = payload_json + "TEMPORARY_FALLBACK_SECRET_CHANGE_ME"
        else:
            expected_signature_input = payload_json + payment_payload_secret
        expected_sig = hashlib.sha256(expected_signature_input.encode('utf-8')).hexdigest()[:16]
        if signature != expected_sig:
            logger.warning(f"Invalid payload signature: '{signature}' vs expected '{expected_sig}'. Payload: {payload_str}")
            return None
        required_keys = ["user_id_tg", "tier_value", "duration_months", "timestamp"]
        if not all(key in data for key in required_keys):
            logger.error(f"Missing required keys in parsed payload: {data}")
            return None
        if not (isinstance(data["user_id_tg"], int) and
                isinstance(data["tier_value"], str) and
                isinstance(data["duration_months"], int) and data["duration_months"] > 0 and
                isinstance(data["timestamp"], int)):
            logger.error(f"Invalid data types or values in parsed payload: {data}")
            return None
        return data
    except json.JSONDecodeError as e:
        logger.error(f"Payload JSON decoding error: {e}. Payload: {payload_str}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error parsing payload: {e}. Payload: {payload_str}", exc_info=True)
        return None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
async def _notify_admin_critical_error(bot: Bot, admin_user_ids: List[int], message_text: str, context: Optional[Dict[str, Any]] = None):
    """Sends a critical error notification to admin(s)."""
    if not admin_user_ids:
        logger.warning("ADMIN_USER_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return
    timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
    full_message = f"üö® {hbold('CRITICAL PAYMENT SYSTEM ERROR')} üö®\n\n"
    full_message += f"**Time**: {timestamp}\n"
    full_message += f"**Error**: {message_text}\n"
    if context:
        full_message += "\n**Context**:\n"
        try:
            context_str = json.dumps(context, indent=2, ensure_ascii=False, default=str)
            full_message += f"```json\n{context_str}\n```\n"
        except Exception:
            full_message += f"{str(context)[:1000]}\n"
    for admin_id in admin_user_ids:
        try:
            await bot.send_message(admin_id, full_message, parse_mode="Markdown")
            logger.info(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

# --- –°–æ–∑–¥–∞–Ω–∏–µ Invoice ---
async def create_invoice_link(
    bot: Bot,
    config: BotConfig,
    user_id_tg: int,
    tier_enum: SubscriptionTier,
    duration_months: int,
    subscription_service: SubscriptionService,
    promocode: Optional[str] = None,
    applied_effects: Optional[Dict[str, Any]] = None
) -> Optional[str]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ invoice –¥–ª—è Telegram Stars.
    """
    try:
        tier_config = subscription_service.plans.PLANS.get(tier_enum)
        if not tier_config:
            logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tier_enum.value} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await _notify_admin_critical_error(bot, config.admin_user_ids, f"Missing tier config for {tier_enum.value}", {"user_id_tg": user_id_tg})
            return None

        base_price = 0
        description_duration_text = ""
        if duration_months == 1:
            base_price = tier_config.price_stars_monthly
            description_duration_text = "1 –º–µ—Å—è—Ü"
        elif duration_months == 12:
            base_price = tier_config.price_stars_yearly
            description_duration_text = "1 –≥–æ–¥"
        else:
            logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration_months} –º–µ—Å. –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tier_enum.value}, user {user_id_tg}")
            await _notify_admin_critical_error(bot, config.admin_user_ids, f"Unsupported duration {duration_months} for tier {tier_enum.value}", {"user_id_tg": user_id_tg})
            return None

        if base_price <= 0 and tier_enum != SubscriptionTier.FREE:
            logger.error(f"–ù—É–ª–µ–≤–∞—è –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ ({base_price}) –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ {tier_enum.value} ({description_duration_text}), user {user_id_tg}.")
            await _notify_admin_critical_error(bot, config.admin_user_ids, f"Zero/Negative price for paid tier {tier_enum.value}", {"user_id_tg": user_id_tg, "base_price": base_price})
            return None

        final_price = base_price
        discount_applied_description = ""
        if applied_effects and 'final_price_after_discount' in applied_effects:
            final_price = int(applied_effects['final_price_after_discount'])
            original_price_for_effect = applied_effects.get('original_price_stars', base_price)
            discount_val_for_effect = applied_effects.get('discount_applied_stars', 0) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º 0
            if not discount_val_for_effect and applied_effects.get('discount_percentage'): # –ï—Å–ª–∏ —Å–∫–∏–¥–∫–∞ –≤ %, –∞ –Ω–µ –≤ –∑–≤–µ–∑–¥–∞—Ö
                 discount_val_for_effect = original_price_for_effect * (applied_effects.get('discount_percentage', 0)/100.0)

            if discount_val_for_effect > 0 :
                 discount_applied_description = f"\n–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É '{promocode}' –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!"
                 if applied_effects.get('description'):
                     discount_applied_description += f" ({applied_effects['description']})"

        if final_price <= 0 and tier_enum != SubscriptionTier.FREE:
            logger.info(f"–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tier_enum.value} —Ä–∞–≤–Ω–∞ {final_price} –∑–≤–µ–∑–¥ (–ø—Ä–æ–º–æ–∫–æ–¥: {promocode}). –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ–∑ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è user {user_id_tg}.")
            return "PROMO_ACTIVATED_FREE"

        payload_str = get_subscription_payload(
            user_id_tg, tier_enum.value, duration_months,
            config.payment_payload_secret, promocode
        )
        invoice_title = f"üåü –ü–æ–¥–ø–∏—Å–∫–∞: {tier_config.tier_name}"
        invoice_description = (
            f"–î–æ—Å—Ç—É–ø –∫ —Ç–∞—Ä–∏—Ñ—É ¬´{tier_config.tier_name}¬ª –Ω–∞ {description_duration_text}.\n"
            f"–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤—Å–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ AI Companion! ‚ú®"
            f"{discount_applied_description}"
        )[:255]
        prices = [types.LabeledPrice(label=f"{tier_config.tier_name} - {description_duration_text}", amount=final_price)]
        
        invoice_link = await bot.create_invoice_link(
            title=invoice_title, description=invoice_description, payload=payload_str,
            provider_token="", currency="XTR", prices=prices,
            need_email=False, need_phone_number=False, need_shipping_address=False, is_flexible=False
        )
        logger.info(f"Invoice link created for user {user_id_tg}: tier={tier_enum.value}, duration={duration_months} –º–µ—Å., price={final_price} XTR, promocode={promocode}. Link: {invoice_link}")
        return invoice_link
    except TelegramAPIError as e:
        logger.error(f"Telegram API error during invoice creation for user {user_id_tg}: {e}. Method: {e.method}, Message: {e.message}", exc_info=True)
        await _notify_admin_critical_error(bot, config.admin_user_ids, f"Telegram API Error creating invoice for user {user_id_tg}: {e.method} - {e.message}", {"user_id_tg": user_id_tg, "tier": tier_enum.value})
        return f"ERROR_API_{e.method}"
    except Exception as e:
        logger.error(f"Unexpected error creating invoice link for user {user_id_tg}: {e}", exc_info=True)
        await _notify_admin_critical_error(bot, config.admin_user_ids, f"Unexpected error creating invoice for user {user_id_tg}", {"user_id_tg": user_id_tg, "error": str(e)})
        return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ ---
@payment_router.callback_query(F.data == "action_enter_promocode_start")
async def enter_promocode_start_handler(callback: types.CallbackQuery, state: FSMContext, bot_instance: 'AICompanionBot'):
    if not callback.message: return await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    await state.set_state(PromoCodeFSM.waiting_for_code_entry)
    await state.update_data(
        last_menu_message_id=callback.message.message_id,
        last_menu_chat_id=callback.message.chat.id,
        target_tier_for_promo=None
    )
    await callback.message.edit_text(
        "üéÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="action_cancel_promocode_entry")]
        ])
    )
    await callback.answer()

@payment_router.message(PromoCodeFSM.waiting_for_code_entry, F.text)
async def process_promocode_entry_handler(message: types.Message, state: FSMContext, bot_instance: 'AICompanionBot'):
    if not message.text or not message.from_user: return
    promocode_str = message.text.strip().upper()
    user_id_tg = message.from_user.id
    db_user = await bot_instance.db_service.get_user_by_telegram_id(user_id_tg)
    if not db_user:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–∞—à–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏ –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞.")
        return

    promocode_service: PromoCodeService = bot_instance.promocode_service
    fsm_data = await state.get_data()
    target_tier_for_promo_value = fsm_data.get("target_tier_for_promo")
    target_tier_enum = SubscriptionTier(target_tier_for_promo_value) if target_tier_for_promo_value else None

    try:
        validated_promo: DataClassPromoCode = await promocode_service.validate_promocode(
            code=promocode_str, user_id_db=db_user.id, target_tier_for_purchase=target_tier_enum
        )
        applied_effects = await promocode_service.apply_promocode_effects(
            user_id_db=db_user.id, user_id_tg=user_id_tg, promo=validated_promo, purchase_amount_stars=None
        )
        await state.update_data(applied_promocode=promocode_str, applied_effects=applied_effects)
        success_message = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {hbold(promocode_str)} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!\n\n"
        success_message += f"{hitalic(applied_effects.get('description', '–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.'))}\n\n"
        buttons: List[List[types.InlineKeyboardButton]] = []

        if applied_effects.get("discount_type") in [PromoCodeDiscountType.FREE_TRIAL.value, PromoCodeDiscountType.BONUS_MESSAGES.value]:
            if applied_effects.get("discount_type") == PromoCodeDiscountType.FREE_TRIAL.value:
                 success_message += "üéâ –í–∞—à —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!"
            elif applied_effects.get("discount_type") == PromoCodeDiscountType.BONUS_MESSAGES.value:
                 success_message += "‚ú® –ë–æ–Ω—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç!"
            buttons.append([types.InlineKeyboardButton(text="üéÆ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav_main")])
            if validated_promo.id:
                await promocode_service.mark_promocode_as_used(validated_promo.id, db_user.id)
            await state.clear()
        else:
            await state.set_state(PromoCodeFSM.code_applied_waiting_payment_confirmation)
            success_message += "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –∏ –æ–ø–ª–∞—Ç–µ —Ç–∞—Ä–∏—Ñ–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π."
            buttons.extend([
                [types.InlineKeyboardButton(text="üí≥ –ö –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞", callback_data="nav_subscription_plans_view")],
                [types.InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="action_cancel_applied_promocode")]
            ])
        await message.answer(success_message, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons), parse_mode="Markdown")
    except PromoCodeValidationError as e:
        await message.reply(f"üòï –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promocode_str} –¥–ª—è user {user_id_tg}: {e}", exc_info=True)
        error_handler: ErrorHandler = bot_instance.error_handler_instance
        error_id = error_handler.log_error(e, context={"promocode": promocode_str, "user_id_tg": user_id_tg})
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–ö–æ–¥: `{error_id}`). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="Markdown")

@payment_router.callback_query(F.data == "action_cancel_promocode_entry", StateFilter(PromoCodeFSM.waiting_for_code_entry))
@payment_router.callback_query(F.data == "action_cancel_applied_promocode", StateFilter(PromoCodeFSM.code_applied_waiting_payment_confirmation))
async def cancel_promocode_fsm_handler(callback: types.CallbackQuery, state: FSMContext, bot_instance: 'AICompanionBot'):
    if not callback.message: return await callback.answer("–û—à–∏–±–∫–∞")
    await state.clear()
    nav_handler = bot_instance.navigation_handlers_instance
    current_persona = await bot_instance._get_current_persona(callback.from_user.id)
    await nav_handler._show_menu_node(callback, callback.from_user.id, "profile_premium_main", current_persona) # type: ignore
    await callback.answer("–í–≤–æ–¥/–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è post-payment –¥–µ–π—Å—Ç–≤–∏–π ---
async def _execute_post_payment_actions(
    bot_instance: 'AICompanionBot',
    user_id_tg: int,
    tier_value: str, # –ù–æ–≤—ã–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
    duration_months: int,
    payment_amount_stars: int,
    telegram_charge_id: str,
    promocode_used: Optional[str]
):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    logger.info(f"Executing post-payment actions for user {user_id_tg}, new tier {tier_value}.")
    actions_results: Dict[str, Any] = {"referral_processed": False, "achievements_updated": False}

    try:
        # 1. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        referral_service: ReferralService = bot_instance.referral_service
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤–∞—è –ª–∏ —ç—Ç–æ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –±—ã–ª –ª–∏ –æ–Ω –ø—Ä–∏–≥–ª–∞—à–µ–Ω
        # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∞—Å—Ç—å—é referral_service.mark_referral_as_completed
        # –∏–ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –æ—Ç—Ç—É–¥–∞.
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ referral_service.mark_referral_as_completed —Å–∞–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É:
        await referral_service.mark_referral_as_completed(user_id_tg) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç, –Ω—É–∂–Ω–æ –ª–∏ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å
        actions_results["referral_processed"] = True # –£—Å–ª–æ–≤–Ω–æ, —Ç.–∫. —Å–∞–º –º–µ—Ç–æ–¥ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—Ö
        logger.info(f"Post-payment: Referral completion processed for user {user_id_tg}.")

    except Exception as e_referral:
        logger.error(f"Post-payment: Error processing referral completion for user {user_id_tg}: {e_referral}", exc_info=True)
        actions_results["referral_error"] = str(e_referral)

    # 2. –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
    try:
        # achievement_service: 'AchievementService' = bot_instance.achievement_service # –ï—Å–ª–∏ –µ—Å—Ç—å
        # await achievement_service.unlock_payment_achievement(user_id_tg, tier_value, payment_amount_stars)
        logger.info(f"Post-payment: Achievement system (stub) called for user {user_id_tg}.")
        actions_results["achievements_updated"] = True # –ó–∞–≥–ª—É—à–∫–∞
    except AttributeError:
        logger.debug("Post-payment: AchievementService not available on bot_instance.")
    except Exception as e_achieve:
        logger.error(f"Post-payment: Error updating achievements for user {user_id_tg}: {e_achieve}", exc_info=True)
        actions_results["achievement_error"] = str(e_achieve)

    # 3. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
    try:
        # personalization_service: 'PersonalizationService' = bot_instance.personalization_service # –ï—Å–ª–∏ –µ—Å—Ç—å
        # await personalization_service.update_user_profile_on_purchase(user_id_tg, tier_value)
        logger.info(f"Post-payment: Personalization system (stub) called for user {user_id_tg}.")
    except AttributeError:
        logger.debug("Post-payment: PersonalizationService not available on bot_instance.")
    except Exception as e_personalize:
        logger.error(f"Post-payment: Error updating personalization for user {user_id_tg}: {e_personalize}", exc_info=True)

    # 4. –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
    try:
        # marketing_service: 'MarketingService' = bot_instance.marketing_service # –ï—Å–ª–∏ –µ—Å—Ç—å
        # await marketing_service.trigger_post_purchase_campaign(user_id_tg, tier_value)
        logger.info(f"Post-payment: Marketing system (stub) called for user {user_id_tg}.")
    except AttributeError:
        logger.debug("Post-payment: MarketingService not available on bot_instance.")
    except Exception as e_marketing:
        logger.error(f"Post-payment: Error triggering marketing actions for user {user_id_tg}: {e_marketing}", exc_info=True)

    logger.info(f"Post-payment actions execution summary for user {user_id_tg}: {actions_results}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π ---
@payment_router.pre_checkout_query()
async def pre_checkout_query_handler(query: types.PreCheckoutQuery, bot_instance: 'AICompanionBot'):
    payload_str = query.invoice_payload
    error_handler: ErrorHandler = bot_instance.error_handler_instance
    config: BotConfig = bot_instance.config

    async def answer_fail(error_message_user: str, log_message: Optional[str] = None):
        final_log_message = log_message or error_message_user
        logger.error(f"PreCheckoutQuery FAILED for user {query.from_user.id}, payload '{payload_str}': {final_log_message}")
        try:
            await bot_instance.bot.answer_pre_checkout_query(query.id, ok=False, error_message=error_message_user)
        except TelegramAPIError as e_api:
            logger.error(f"TelegramAPIError answering FAIL PreCheckoutQuery {query.id}: {e_api}")

    parsed_payload = parse_subscription_payload(payload_str, config.payment_payload_secret)
    if not parsed_payload:
        return await answer_fail("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç.", f"Invalid payload for PreCheckoutQuery: '{payload_str}'")

    user_id_tg_from_payload = parsed_payload["user_id_tg"]
    tier_value_from_payload = parsed_payload["tier_value"]
    promocode_from_payload = parsed_payload.get("promocode")

    if query.from_user.id != user_id_tg_from_payload:
        return await answer_fail("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.", f"User ID mismatch: query.from_user.id ({query.from_user.id}) != payload.user_id_tg ({user_id_tg_from_payload})")

    try:
        target_tier_enum = SubscriptionTier(tier_value_from_payload)
    except ValueError:
        return await answer_fail("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∑–∞–Ω–æ–≤–æ.", f"Unknown tier '{tier_value_from_payload}' in payload.")

    if promocode_from_payload:
        promocode_service: PromoCodeService = bot_instance.promocode_service
        db_user = await bot_instance.db_service.get_user_by_telegram_id(query.from_user.id)
        if not db_user:
            return await answer_fail("–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", f"User TG ID {query.from_user.id} not found in DB for promocode validation.")
        try:
            await promocode_service.validate_promocode(
                code=promocode_from_payload, user_id_db=db_user.id,
                target_tier_for_purchase=target_tier_enum, purchase_amount_stars=query.total_amount
            )
        except PromoCodeValidationError as e_promo:
            return await answer_fail(f"–ü—Ä–æ–º–æ–∫–æ–¥ '{promocode_from_payload}' –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {str(e_promo)}", f"Promocode '{promocode_from_payload}' validation failed: {e_promo}")
        except Exception as e_val_promo:
            error_id = error_handler.log_error(e_val_promo, {"payload": payload_str, "user_id": query.from_user.id, "promocode": promocode_from_payload})
            return await answer_fail(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–ö–æ–¥: `{error_id}`). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ–∑ –Ω–µ–≥–æ.", f"Exception during promocode validation (ID: {error_id}): {e_val_promo}")
    try:
        await bot_instance.bot.answer_pre_checkout_query(query.id, ok=True)
        logger.info(f"PreCheckoutQuery for user {query.from_user.id} (payload: {payload_str}) successfully confirmed.")
    except Exception as e:
        error_id = error_handler.log_error(e, {"payload": payload_str, "user_id": query.from_user.id})
        await answer_fail(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ (–ö–æ–¥: `{error_id}`).", f"Unexpected error answering OK PreCheckoutQuery (ID: {error_id}): {e}")

@payment_router.message(F.successful_payment)
async def successful_payment_handler(message: types.Message, bot_instance: 'AICompanionBot'):
    if not message.from_user or not message.successful_payment:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ SuccessfulPayment –±–µ–∑ from_user –∏–ª–∏ successful_payment –¥–∞–Ω–Ω—ã—Ö.")
        return

    payment_info = message.successful_payment
    payload_str = payment_info.invoice_payload
    user_id_tg = message.from_user.id
    error_handler: ErrorHandler = bot_instance.error_handler_instance
    config: BotConfig = bot_instance.config

    logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç user {user_id_tg}: {payment_info.total_amount} {payment_info.currency}, ID –ø–ª–∞—Ç–µ–∂–∞ Telegram: {payment_info.telegram_payment_charge_id}, Payload: {payload_str}")

    parsed_payload = parse_subscription_payload(payload_str, config.payment_payload_secret)
    if not parsed_payload:
        error_msg_for_log = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å payload '{payload_str}' –∏–∑ SuccessfulPayment –æ—Ç user {user_id_tg}."
        error_id = error_handler.log_error(ValueError(error_msg_for_log), {"payload": payload_str, "user_id_tg": user_id_tg})
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–ö–æ–¥: `{error_id}`). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", parse_mode="Markdown")
        return

    if parsed_payload["user_id_tg"] != user_id_tg:
        error_msg_for_log = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: user_id_tg –≤ payload ({parsed_payload['user_id_tg']}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å user_id_tg –≤ SuccessfulPayment ({user_id_tg})."
        error_id = error_handler.log_error(ValueError(error_msg_for_log), {"payload": payload_str, "user_id_tg": user_id_tg})
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ (–ö–æ–¥: `{error_id}`). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", parse_mode="Markdown")
        return

    tier_value = parsed_payload["tier_value"]
    duration_months = parsed_payload["duration_months"]
    promocode_used = parsed_payload.get("promocode")
    duration_days = duration_months * 30
    if duration_months == 12: duration_days = 365

    subscription_service: SubscriptionService = bot_instance.subscription_service
    promocode_service: PromoCodeService = bot_instance.promocode_service
    db_service = bot_instance.db_service # –£–±—Ä–∞–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—è ': DatabaseService', —Ç.–∫. TYPE_CHECKING –Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞

    try:
        activation_result = await subscription_service.activate_subscription(
            user_id_tg=user_id_tg, new_tier_value=tier_value, duration_days=duration_days,
            payment_amount_stars=payment_info.total_amount,
            telegram_charge_id=payment_info.telegram_payment_charge_id,
            payment_provider="TelegramStars"
        )

        if activation_result.get("success"):
            success_msg = activation_result.get("message", f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ ¬´{subscription_service._get_tier_name(tier_value)}¬ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
            if promocode_used:
                success_msg += f"\n–ü—Ä–æ–º–æ–∫–æ–¥ {hbold(promocode_used)} —É—á—Ç–µ–Ω."
                db_user = await db_service.get_user_by_telegram_id(user_id_tg)
                if db_user:
                    promo_obj_db = await promocode_service.db_service.get_promocode_by_code(promocode_used)
                    if promo_obj_db and promo_obj_db.id:
                        await promocode_service.mark_promocode_as_used(promo_obj_db.id, db_user.id, order_id=payment_info.telegram_payment_charge_id)
                    else: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ {promocode_used} –≤ –ë–î –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
                else: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_tg} –≤ –ë–î –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
            
            await message.answer(success_msg, parse_mode="Markdown")
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è user {user_id_tg}. –¢–∞—Ä–∏—Ñ: {tier_value}, –î–Ω–µ–π: {duration_days}")
            
            # –í—ã–∑–æ–≤ post-payment actions
            await _execute_post_payment_actions(
                bot_instance, user_id_tg, tier_value, duration_months,
                payment_info.total_amount, payment_info.telegram_payment_charge_id, promocode_used
            )
        else:
            error_msg_for_user = activation_result.get("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
            error_id = error_handler.log_error(
                Exception(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {error_msg_for_user}"),
                {"payload": payload_str, "user_id_tg": user_id_tg, "activation_result": activation_result}
            )
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–ö–æ–¥: `{error_id}`). –°—Ä–µ–¥—Å—Ç–≤–∞ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", parse_mode="Markdown")
    except Exception as e:
        error_id = error_handler.log_error(e, {"payload": payload_str, "user_id_tg": user_id_tg, "payment_info": payment_info.model_dump_json(exclude_none=True)})
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SuccessfulPayment –¥–ª—è user {user_id_tg} (ID: {error_id}): {e}", exc_info=True)
        await message.answer(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (–ö–æ–¥: `{error_id}`). –°—Ä–µ–¥—Å—Ç–≤–∞ —Å–ø–∏—Å–∞–Ω—ã. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", parse_mode="Markdown")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ ---
@payment_router.callback_query(F.data.startswith("nav_subscribe_"))
async def handle_subscribe_button(callback: types.CallbackQuery, state: FSMContext, bot_instance: 'AICompanionBot'):
    if not callback.message or not callback.from_user: return await callback.answer("–û—à–∏–±–∫–∞")
    action_parts = callback.data.split("_")
    if len(action_parts) < 4:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {callback.data}")
        return await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞.", show_alert=True)
    try:
        tier_str = action_parts[2].lower()
        duration_type = action_parts[3].lower()
        tier_enum = SubscriptionTier(tier_str)
        duration_months = 1 if duration_type == "monthly" else 12
    except ValueError:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ callback: {callback.data}")
        return await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞.", show_alert=True)

    user_id_tg = callback.from_user.id
    subscription_service: SubscriptionService = bot_instance.subscription_service
    config: BotConfig = bot_instance.config
    fsm_data = await state.get_data()
    applied_promocode = fsm_data.get("applied_promocode")
    applied_effects = fsm_data.get("applied_effects")

    invoice_link_or_flag = await create_invoice_link(
        bot=bot_instance.bot, config=config, user_id_tg=user_id_tg,
        tier_enum=tier_enum, duration_months=duration_months,
        subscription_service=subscription_service, promocode=applied_promocode, applied_effects=applied_effects
    )

    if invoice_link_or_flag == "PROMO_ACTIVATED_FREE":
        # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–∞–ª 100% —Å–∫–∏–¥–∫—É –∏–ª–∏ —Ç—Ä–∏–∞–ª, –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –º–æ–≥–ª–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ apply_promocode_effects
        # –∏–ª–∏ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ–π—á–∞—Å –±–µ–∑ –ø–ª–∞—Ç–µ–∂–∞.
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–≤–µ–ª –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
        if applied_promocode and applied_effects:
            db_user = await bot_instance.db_service.get_user_by_telegram_id(user_id_tg)
            promo_service: PromoCodeService = bot_instance.promocode_service
            validated_promo = await promo_service.validate_promocode(applied_promocode, db_user.id if db_user else None, target_tier_enum) # type: ignore
            if db_user and validated_promo and validated_promo.id:
                 # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ promocode_id —ç—Ç–æ int
                promocode_id_to_mark = validated_promo.id
                if isinstance(promocode_id_to_mark, int):
                    await promo_service.mark_promocode_as_used(promocode_id_to_mark, db_user.id, order_id=f"PROMO_FREE_{tier_enum.value}")
                else:
                    logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏: {promocode_id_to_mark}")

        await callback.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)
        await state.clear()
        nav_handler = bot_instance.navigation_handlers_instance
        await nav_handler.show_my_subscription_view(callback)
        return

    if invoice_link_or_flag and not invoice_link_or_flag.startswith("ERROR_API_"):
        payment_button = types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Telegram Stars", url=invoice_link_or_flag)
        back_button = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–æ–≤", callback_data="nav_subscription_plans_view")
        markup = types.InlineKeyboardMarkup(inline_keyboard=[[payment_button], [back_button]])
        tier_config = subscription_service.plans.PLANS.get(tier_enum)
        if not tier_config:
            await callback.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞.", show_alert=True); return
        price = tier_config.price_stars_monthly if duration_months == 1 else tier_config.price_stars_yearly
        if applied_effects and "final_price_after_discount" in applied_effects:
            price = int(applied_effects["final_price_after_discount"])
        text_to_send = (f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {hbold(tier_config.tier_name)} –Ω–∞ {'1 –º–µ—Å—è—Ü' if duration_months == 1 else '1 –≥–æ–¥'}.\n"
                        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {hbold(str(price))} ‚≠ê (Telegram Stars).\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.")
        if applied_promocode:
            text_to_send += f"\n\n{hitalic(f'–ü—Ä–æ–º–æ–∫–æ–¥ {applied_promocode} –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω.')}"
        try: await callback.message.edit_text(text_to_send, reply_markup=markup, parse_mode="Markdown")
        except Exception as e_edit:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞: {e_edit}. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ.")
             await callback.message.answer(text_to_send, reply_markup=markup, parse_mode="Markdown")
        await state.clear()
        await callback.answer()
    else:
        error_msg_display = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if invoice_link_or_flag and invoice_link_or_flag.startswith("ERROR_API_"):
            logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –¥–ª—è user {user_id_tg}: {invoice_link_or_flag}")
        await callback.answer(error_msg_display, show_alert=True)
        nav_handler = bot_instance.navigation_handlers_instance
        current_persona = await bot_instance._get_current_persona(user_id_tg)
        await nav_handler._show_menu_node(callback, user_id_tg, "subscription_plans_view", current_persona) # type: ignore

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ ---
@payment_router.callback_query(F.data == "action_compare_plans")
async def handle_compare_plans_callback(callback: types.CallbackQuery, state: FSMContext, bot_instance: 'AICompanionBot'):
    if not callback.message or not callback.from_user: return await callback.answer("–û—à–∏–±–∫–∞")
    subscription_service: SubscriptionService = bot_instance.subscription_service
    text = f"{hbold('üíé –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¢–∞—Ä–∏—Ñ–æ–≤ AI Companion Bot')}\n\n"
    for tier_enum, limits in subscription_service.plans.PLANS.items():
        text += f"--- {hbold(limits.tier_name)} ---\n"
        text += f"–¶–µ–Ω–∞ (–º–µ—Å/–≥–æ–¥): {limits.price_stars_monthly}‚≠ê / {limits.price_stars_yearly}‚≠ê\n"
        text += f"–°–æ–æ–±—â–µ–Ω–∏—è/–¥–µ–Ω—å: {'–ë–µ–∑–ª–∏–º–∏—Ç' if limits.daily_messages == -1 else limits.daily_messages}\n"
        text += f"–ü–∞–º—è—Ç—å: {limits.memory_type} ({'–ë–µ–∑–ª–∏–º–∏—Ç' if limits.max_memory_entries == -1 else limits.max_memory_entries} –∑–∞–ø., "
        text += f"{'–ü–æ—Å—Ç–æ—è–Ω–Ω–æ' if limits.memory_retention_days == -1 else (str(limits.memory_retention_days) + ' –¥–Ω.')})\n"
        text += f"–ì–æ–ª–æ—Å–æ–≤—ã–µ: {'–î–∞' if limits.voice_messages_allowed else '–ù–µ—Ç'}\n"
        text += f"AI-–ò–Ω—Å–∞–π—Ç—ã: {'–î–∞' if limits.ai_insights_access else '–ù–µ—Ç'}\n"
        text += f"–ú–∞–∫—Å. —É—Ä–æ–≤–µ–Ω—å Luneth: {limits.sexting_max_level}\n"
        text += f"–î–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–º: {', '.join(limits.personas_access)}\n"
        if limits.priority_support: text += "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –î–∞\n"
        if limits.additional_features:
            text += "–î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏: " + ", ".join([f"{k.replace('_',' ').title()}" for k,v in limits.additional_features.items() if v is True]) + "\n"
        text += "\n"
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí≥ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="nav_subscription_plans_view")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="nav_my_subscription_view")]
    ])
    try: await callback.message.edit_text(text, reply_markup=markup, parse_mode="Markdown")
    except Exception as e_edit:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤: {e_edit}. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ.")
        await callback.message.answer(text, reply_markup=markup, parse_mode="Markdown")
    await callback.answer()
