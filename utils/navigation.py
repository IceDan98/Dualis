# utils/navigation.py
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from typing import Dict, List, Optional, Any, Union

logger = logging.getLogger(__name__)

class NavigationNode:
    """
    –£–∑–µ–ª –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
    ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞ NavigationNode –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    """
    def __init__(self,
                 id: str,
                 text: str,
                 handler: Optional[str] = None,
                 children: Optional[List['NavigationNode']] = None,
                 action: Optional[str] = None,
                 persona_specific: Optional[List[str]] = None,
                 condition: Optional[str] = None,
                 web_app_url: Optional[str] = None,
                 row: Optional[int] = None,
                 emoji: Optional[str] = "",
                 dynamic_text_key: Optional[str] = None,
                 parent_id_override: Optional[str] = None):
        self.id = id
        self.text_template = f"{emoji} {text}".strip() if emoji else text
        self.handler = handler
        self.children = children if children else []
        self.action = action
        self.persona_specific = persona_specific if persona_specific else []
        self.condition = condition
        self.web_app_url = web_app_url
        self.row = row
        self.dynamic_text_key = dynamic_text_key
        self.parent_id_override = parent_id_override
        self.parent_id: Optional[str] = None

    def add_child(self, node: 'NavigationNode'):
        self.children.append(node)

    def get_text(self, user_conditions: Optional[Dict[str, Any]] = None) -> str:
        text = self.text_template
        user_conditions = user_conditions or {}

        if self.dynamic_text_key:
            current_persona = user_conditions.get('current_persona')
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è current_persona
            if self.dynamic_text_key == 'current_persona' and self.action and self.action.startswith("switch_persona_"):
                persona_name_from_action = self.action.split("switch_persona_")[-1]
                if current_persona == persona_name_from_action:
                    text += " (—Ç–µ–∫—É—â–∞—è)"
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è current_vibe_aeris
            elif self.dynamic_text_key == 'current_vibe_aeris' and self.action and self.action.startswith("set_vibe_aeris_"):
                vibe_name_from_action = self.action.split("set_vibe_aeris_")[-1]
                if user_conditions.get('current_vibe_aeris') == vibe_name_from_action:
                    text += " ‚úì"
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è current_sexting_level_luneth
            elif self.dynamic_text_key == 'current_sexting_level_luneth' and self.action and self.action.startswith("set_sexting_level_"):
                try:
                    level_from_action = int(self.action.split("set_sexting_level_")[-1])
                    if user_conditions.get('current_sexting_level_luneth') == level_from_action:
                        text += " ‚úì"
                except ValueError:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—Ä–æ–≤–Ω—è –∏–∑ action '{self.action}' –¥–ª—è dynamic_text_key")
        return text


class NavigationManager:
    """
    ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞ NavigationManager –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    """
    def __init__(self, root_nodes: List[NavigationNode]):
        self.root_nodes_map: Dict[str, NavigationNode] = {node.id: node for node in root_nodes}
        self.node_map: Dict[str, NavigationNode] = {}
        self._build_node_map(root_nodes)
        logger.info(f"NavigationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–∑–ª–æ–≤: {len(self.node_map)}")

    def _build_node_map(self, nodes: List[NavigationNode], parent_id: Optional[str] = None):
        for node in nodes:
            if node.id in self.node_map:
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è ID —É–∑–ª–∞: {node.id}. –£–∑–µ–ª –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –≤ –∫–∞—Ä—Ç–µ.")
            node.parent_id = parent_id
            self.node_map[node.id] = node
            if node.children:
                self._build_node_map(node.children, node.id)

    def get_node(self, node_id: str) -> Optional[NavigationNode]:
        return self.node_map.get(node_id)

    def create_markup(self,
                      current_node_id: str,
                      current_persona: Optional[str] = None,
                      user_conditions: Optional[Dict[str, Any]] = None,
                      pagination_buttons: Optional[List[List[InlineKeyboardButton]]] = None
                     ) -> InlineKeyboardMarkup:
        node = self.get_node(current_node_id)
        if not node:
            logger.warning(f"–£–∑–µ–ª –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å ID '{current_node_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ 'main'.")
            node = self.get_node("main") 
            if not node: 
                 logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –£–∑–µ–ª 'main' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!")
                 return InlineKeyboardMarkup(inline_keyboard=[
                     [InlineKeyboardButton(text="–û—à–∏–±–∫–∞: –ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", callback_data="error_menu_critical")]
                 ])

        buttons_rows: List[List[InlineKeyboardButton]] = []
        user_conditions_checked = user_conditions or {}
        if current_persona:
            user_conditions_checked['current_persona'] = current_persona

        row_buckets: Dict[int, List[InlineKeyboardButton]] = {}
        default_row_start_index = 1000 # –î–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è row, —á—Ç–æ–±—ã –æ–Ω–∏ —à–ª–∏ –ø–æ—Å–ª–µ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö

        # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
        children_to_render = node.children
        
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª —Å–∞–º —è–≤–ª—è–µ—Ç—Å—è "–ª–∏—Å—Ç–æ–≤—ã–º" –∏ –Ω–µ –∏–º–µ–µ—Ç –¥–µ—Ç–µ–π,
        # –Ω–æ –∏–º–µ–µ—Ç action –∏–ª–∏ handler, –æ–Ω –º–æ–∂–µ—Ç —Å–∞–º –±—ã—Ç—å –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—è.
        # –û–¥–Ω–∞–∫–æ, create_markup –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –£–ó–õ–ê, —á—å–∏—Ö –î–ï–¢–ï–ô –º—ã —Ä–µ–Ω–¥–µ—Ä–∏–º.
        # –ü–æ—ç—Ç–æ–º—É —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –∑–¥–µ—Å—å –∏–∑–±—ã—Ç–æ—á–Ω–∞.

        for child_node in children_to_render:
            if child_node.persona_specific and "all" not in child_node.persona_specific and current_persona not in child_node.persona_specific:
                continue
            if child_node.condition and not user_conditions_checked.get(child_node.condition, False):
                continue

            callback_data = f"nav_{child_node.id}" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ –¥–æ—á–µ—Ä–Ω–µ–º—É —É–∑–ª—É
            if child_node.action:
                callback_data = f"action_{child_node.action}"
            elif child_node.handler: # –ï—Å–ª–∏ –µ—Å—Ç—å handler, –æ–Ω –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –ø—Ä–æ—Å—Ç–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ ID
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ handler ID –¥—Ä—É–≥–æ–≥–æ —É–∑–ª–∞ –∏–ª–∏ –ø—Ä—è–º—ã–º callback_data
                if self.get_node(child_node.handler): # –ï—Å–ª–∏ handler - —ç—Ç–æ ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É–∑–ª–∞
                    callback_data = f"nav_{child_node.handler}"
                else: # –ò–Ω–∞—á–µ handler - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è callback_data
                    callback_data = child_node.handler # –ú–æ–∂–µ—Ç –±—ã—Ç—å action_ –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ
            
            button_text = child_node.get_text(user_conditions_checked)
            button_params: Dict[str, Any] = {"text": button_text}

            if child_node.web_app_url:
                button_params["web_app"] = WebAppInfo(url=child_node.web_app_url)
            else:
                button_params["callback_data"] = callback_data
            
            button = InlineKeyboardButton(**button_params)
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä—è–¥–∞–º
            row_index = child_node.row if child_node.row is not None else (default_row_start_index + len(buttons_rows) + len(row_buckets))
            if row_index not in row_buckets:
                row_buckets[row_index] = []
            row_buckets[row_index].append(button)

        # –°–æ–±–∏—Ä–∞–µ–º —Ä—è–¥—ã –∏–∑ –±–∞–∫–µ—Ç–æ–≤ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for row_idx in sorted(row_buckets.keys()):
            buttons_rows.append(row_buckets[row_idx])
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏–ª–∏ "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        # parent_id_to_use —É—á–∏—Ç—ã–≤–∞–µ—Ç parent_id_override
        parent_id_to_use = node.parent_id_override if node.parent_id_override is not None else node.parent_id
        
        if parent_id_to_use: # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–ª–∏ –æ–±—ã—á–Ω—ã–π)
            if self.get_node(parent_id_to_use): # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–∫–æ–π —É–∑–µ–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                 buttons_rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"nav_{parent_id_to_use}")])
            else:
                 logger.warning(f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª '{parent_id_to_use}' –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –Ω–µ –Ω–∞–π–¥–µ–Ω (–¥–ª—è —É–∑–ª–∞ '{current_node_id}'). –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'.")
                 if current_node_id != "main": # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –µ—Å–ª–∏ –º—ã —É–∂–µ –≤ –Ω–µ–º
                     buttons_rows.append([InlineKeyboardButton(text="üè° –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav_main")])
        elif current_node_id != "main": # –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–µ—Ç, –Ω–æ –º—ã –Ω–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
             buttons_rows.append([InlineKeyboardButton(text="üè° –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="nav_main")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if pagination_buttons:
            buttons_rows.extend(pagination_buttons)
            
        return InlineKeyboardMarkup(inline_keyboard=buttons_rows)

    def create_quick_actions_menu(self, current_persona: str, user_conditions: Optional[Dict[str, Any]] = None) -> InlineKeyboardMarkup:
        # ... (–∫–æ–¥ –º–µ—Ç–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        user_conditions_checked = user_conditions or {}
        buttons_rows: List[List[InlineKeyboardButton]] = []

        if current_persona == 'aeris':
            vibes_aeris_quick = {'friend': 'üòä', 'romantic': 'ü•∞', 'passionate': 'üî•', 'philosophical': 'ü§î'}
            current_vibe_aeris = user_conditions_checked.get('current_vibe_aeris')
            row1_aeris = [
                InlineKeyboardButton(
                    text=f"{emoji}{' ‚úì' if vibe_key == current_vibe_aeris else ''}", 
                    callback_data=f"action_set_vibe_aeris_{vibe_key}"
                ) for vibe_key, emoji in vibes_aeris_quick.items()
            ]
            buttons_rows.append(row1_aeris)
            buttons_rows.append([
                InlineKeyboardButton(text="üìö –ò—Å—Ç–æ—Ä–∏—è", callback_data="action_create_story"),
                InlineKeyboardButton(text="üí´ –§–∞–Ω—Ç–∞–∑–∏—è", callback_data="action_romantic_fantasy"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="nav_stats") # –ò–∑–º–µ–Ω–µ–Ω –Ω–∞ nav_stats
            ])
        elif current_persona == 'luneth':
            levels_luneth_quick = [1, 3, 5, 7, 10] # –î–æ–±–∞–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å 1 –¥–ª—è –Ω–∞—á–∞–ª–∞
            current_level_luneth = user_conditions_checked.get('current_sexting_level_luneth')
            row1_luneth = [
                InlineKeyboardButton(
                    text=f"üî•{level}{' ‚úì' if level == current_level_luneth else ''}", 
                    callback_data=f"action_set_sexting_level_{level}"
                ) for level in levels_luneth_quick
            ]
            buttons_rows.append(row1_luneth)
            buttons_rows.append([
                InlineKeyboardButton(text="üíã –•–æ—á—É —Ç–µ–±—è!", callback_data="action_i_want_you"),
                InlineKeyboardButton(text="üé≠ –†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã", callback_data="nav_roleplay_madina"),
                InlineKeyboardButton(text="üòå –û—Å—Ç—ã—Ç—å", callback_data="action_stop_sexting")
            ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons_rows)


# --- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---
def create_pagination_buttons(current_page: int,
                             total_pages: int,
                             callback_prefix: str,
                             items_per_row: int = 5) -> List[List[InlineKeyboardButton]]:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if total_pages <= 1:
        return []

    rows: List[List[InlineKeyboardButton]] = []
    page_buttons_flat: List[InlineKeyboardButton] = []
    
    pages_to_render = set()
    if total_pages <= items_per_row + 2: 
        for i in range(1, total_pages + 1):
            pages_to_render.add(i)
    else:
        pages_to_render.add(1)
        pages_to_render.add(total_pages)
        num_around_current = (items_per_row - 3) // 2 
        if num_around_current < 0 : num_around_current = 0

        for i in range(max(1, current_page - num_around_current), min(total_pages, current_page + num_around_current) + 1):
            pages_to_render.add(i)
        
        if current_page - num_around_current > 2: pages_to_render.add(2)
        if current_page + num_around_current < total_pages - 1: pages_to_render.add(total_pages - 1)
        
    sorted_page_numbers = sorted(list(pages_to_render))
    
    last_rendered_page = 0
    for page_num in sorted_page_numbers:
        if page_num > last_rendered_page + 1 and last_rendered_page != 0:
            if len(page_buttons_flat) < items_per_row: 
                page_buttons_flat.append(InlineKeyboardButton(text="‚Ä¶", callback_data=f"{callback_prefix}_noop"))
        
        text = f"‚Ä¢ {page_num} ‚Ä¢" if page_num == current_page else str(page_num)
        page_buttons_flat.append(InlineKeyboardButton(text=text, callback_data=f"{callback_prefix}_page_{page_num}"))
        last_rendered_page = page_num

    # –†–∞–∑–¥–µ–ª—è–µ–º page_buttons_flat –Ω–∞ —Ä—è–¥—ã –ø–æ items_per_row
    for i in range(0, len(page_buttons_flat), items_per_row):
        rows.append(page_buttons_flat[i:i + items_per_row])

    nav_row = []
    if current_page > 1:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥.", callback_data=f"{callback_prefix}_page_{current_page - 1}"))
    if current_page < total_pages:
        nav_row.append(InlineKeyboardButton(text="–°–ª–µ–¥. ‚û°Ô∏è", callback_data=f"{callback_prefix}_page_{current_page + 1}"))
    
    if nav_row:
        rows.append(nav_row)
        
    return rows

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—É–∑–ª—ã) ---
# –ì–ª–∞–≤–Ω—ã–π —É–∑–µ–ª
main_node = NavigationNode(
    id="main", text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", emoji="üéÆ",
    children=[
        NavigationNode(id="personas_nav", text="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É", emoji="üé≠", handler="nav_personas", row=0),
        NavigationNode(id="current_persona_settings_nav", text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—É—â–µ–π –ø–µ—Ä—Å–æ–Ω—ã", emoji="‚öôÔ∏è", handler="nav_current_persona_settings", row=1),
        NavigationNode(id="activities_nav", text="–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", emoji="üé®", handler="nav_activities", row=2),
        NavigationNode(id="memory_journal_main_nav", text="–ü–∞–º—è—Ç—å –∏ –ñ—É—Ä–Ω–∞–ª", emoji="üß†", handler="nav_memory_journal_main", row=3),
        NavigationNode(id="stats_nav", text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", emoji="üìä", handler="nav_stats", row=4), # –°—Å—ã–ª–∫–∞ –Ω–∞ —É–∑–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        NavigationNode(id="profile_premium_main_nav", text="–ü—Ä–æ—Ñ–∏–ª—å –∏ –ü–æ–¥–ø–∏—Å–∫–∏", emoji="üë§", handler="nav_profile_premium_main", row=5),
        NavigationNode(id="admin_panel_entry_nav", text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", emoji="üõ†Ô∏è", condition="is_admin", handler="nav_admin_main", row=6),
        NavigationNode(id="help_feedback_main_nav", text="–ü–æ–º–æ—â—å –∏ –°–≤—è–∑—å", emoji="‚ùì", handler="nav_help_feedback_main", row=7),
        NavigationNode(id="close_menu_action", text="–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", emoji="‚ùå", action="close_menu", row=8)
    ]
)

# –£–∑–µ–ª –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω
personas_node = NavigationNode(
    id="personas", text="–í—ã–±–æ—Ä AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞", emoji="üé≠",
    children=[
        NavigationNode(id="switch_to_diana", text="Diana", emoji="üåü", action="switch_persona_diana", dynamic_text_key="current_persona", row=0),
        NavigationNode(id="switch_to_madina", text="Madina", emoji="üòà", action="switch_persona_madina", dynamic_text_key="current_persona", row=0, condition="can_access_madina"),
    ]
)

# –£–∑–µ–ª-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä—Å–æ–Ω—ã
current_persona_settings_node = NavigationNode(id="current_persona_settings", text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω—ã")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Diana
diana_vibes_nodes_children = [
    NavigationNode(id=f"vibe_diana_{key}", text=name, action=f"set_vibe_diana_{key}", dynamic_text_key="current_vibe_diana", row=i//2)
    for i, (key, name) in enumerate(
        {'friend': 'üòä –î—Ä—É–∂–µ—Å–∫–∏–π', 'romantic': 'ü•∞ –†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π', 'passionate': 'üî• –°—Ç—Ä–∞—Å—Ç–Ω—ã–π', 'philosophical': 'ü§î –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π'}.items()
    )
]
settings_diana_node = NavigationNode(
    id="settings_diana", text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Diana", emoji="‚öôÔ∏è", persona_specific=['diana'],
    children=diana_vibes_nodes_children + [
        NavigationNode(id="diana_romantic_fantasy_act", text="–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∞–Ω—Ç–∞–∑–∏—è", emoji="üí´", action="romantic_fantasy", row=2), # –û–±–Ω–æ–≤–ª–µ–Ω row
        NavigationNode(id="diana_mood_check_act", text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", emoji="üéØ", action="mood_check", row=2), # –û–±–Ω–æ–≤–ª–µ–Ω row
        # NavigationNode(id="diana_ispark_act", text="–ò—Å–∫—Ä–∞ –º—ã—Å–ª–∏", emoji="üí°", action="ispark_diana", row=3), # –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        # NavigationNode(id="diana_selfpath_act", text="–ü—É—Ç—å –∫ —Å–µ–±–µ", emoji="üß≠", action="selfpath_diana", row=3), # –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Madina
madina_sexting_level_nodes_children = [
    NavigationNode(
        id=f"sexting_level_madina_{i}", 
        text=f"{'üî•' * min(i // 2 + 1, 5) if i > 0 else '‚ùÑÔ∏è'} –£—Ä–æ–≤–µ–Ω—å {i}", 
        action=f"set_sexting_level_{i}", 
        dynamic_text_key="current_sexting_level_madina",
        row=(i-1)//2 
    ) for i in range(1, 11) 
]
settings_madina_node = NavigationNode(
    id="settings_madina", text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Madina", emoji="‚öôÔ∏è", persona_specific=['madina'],
    children=madina_sexting_level_nodes_children + [
        NavigationNode(id="madina_i_want_you_act", text="–Ø —Ö–æ—á—É —Ç–µ–±—è", emoji="üíã", action="i_want_you", row=5), # –û–±–Ω–æ–≤–ª–µ–Ω row
        NavigationNode(id="madina_stop_sexting_act", text="–û—Å—Ç—ã—Ç—å", emoji="üòå", action="stop_sexting", row=5), # –û–±–Ω–æ–≤–ª–µ–Ω row
        NavigationNode(id="madina_roleplay_nav_link", text="–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã", emoji="üé≠", handler="nav_roleplay_madina", row=6) # –û–±–Ω–æ–≤–ª–µ–Ω row
    ]
)
roleplay_madina_node = NavigationNode(
    id="roleplay_madina", text="–†–æ–ª–µ–≤—ã–µ –∏–≥—Ä—ã —Å Madina", emoji="üé≠",
    children=[
        NavigationNode(id="rp_madina_submissive_act", text="–ü–æ–∫–æ—Ä–Ω–∞—è –ú–∞–¥–∏–Ω–∞", action="start_roleplay_madina_sub", row=0),
        NavigationNode(id="rp_madina_dominant_act", text="–í–ª–∞—Å—Ç–Ω–∞—è –ú–∞–¥–∏–Ω–∞", action="start_roleplay_madina_dom", row=0),
        NavigationNode(id="rp_madina_custom_act", text="–°–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π...", action="start_roleplay_madina_custom", row=1),
    ]
)

# –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
activities_node = NavigationNode(
    id="activities", text="–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –∏ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", emoji="üé®",
    children=[
        NavigationNode(id="act_create_story_link", text="–°–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", emoji="üìö", action="action_create_story_fsm", row=0), # –ò–∑–º–µ–Ω–µ–Ω action –¥–ª—è –∑–∞–ø—É—Å–∫–∞ FSM
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª –¥–ª—è /start_quest
        NavigationNode(id="act_start_quest_link", text="–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è", emoji="üó∫Ô∏è", action="action_start_quest", persona_specific=['diana','all'], row=0), # –£–∫–∞–∑—ã–≤–∞–µ–º action
        NavigationNode(id="act_write_poem", text="–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∏—Ö", emoji="üéµ", action="write_poem", row=1),
        NavigationNode(id="act_describe_scene", text="–û–ø–∏—Å–∞—Ç—å —Å—Ü–µ–Ω—É", emoji="üñºÔ∏è", action="describe_scene", row=1),
        NavigationNode(id="act_improvisation", text="–ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è", emoji="üé≠", action="improvisation", row=2),
        NavigationNode(id="act_daydream", text="–°–æ–Ω –Ω–∞—è–≤—É", emoji="üåü", action="daydream", row=2),
        NavigationNode(id="act_future_letter", text="–ü–∏—Å—å–º–æ –≤ –±—É–¥—É—â–µ–µ", emoji="üìù", action="future_letter", row=3),
        NavigationNode(id="act_romantic_fantasy_link", text="–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∞–Ω—Ç–∞–∑–∏—è", emoji="üí´", action="romantic_fantasy", persona_specific=['diana', 'all'], row=4, condition="can_create_fantasy"),
        NavigationNode(id="act_mood_check_link", text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", emoji="üéØ", action="mood_check", persona_specific=['diana', 'all'], row=4),
    ]
)

# –ü–∞–º—è—Ç—å –∏ –ñ—É—Ä–Ω–∞–ª
memory_journal_main_node = NavigationNode(
    id="memory_journal_main", text="–ü–∞–º—è—Ç—å –∏ –ñ—É—Ä–Ω–∞–ª", emoji="üß†",
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    children=[
        NavigationNode(id="mem_save_insight_act", text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º—ã—Å–ª—å", emoji="üí°", action="save_insight", row=0),
        NavigationNode(id="mem_my_insights_act", text="–ú–æ–∏ –∏–Ω—Å–∞–π—Ç—ã", emoji="üîç", action="my_insights", row=0),
        NavigationNode(id="mem_new_journal_entry_act", text="–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª", emoji="‚úçÔ∏è", action="new_journal_entry", row=1),
        NavigationNode(id="mem_my_journal_act", text="–ú–æ–π –∂—É—Ä–Ω–∞–ª", emoji="üìî", action="my_journal", row=1),
        NavigationNode(id="mem_our_memories_act", text="–ù–∞—à–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è", emoji="üß†", action="our_memories", row=2),
        NavigationNode(id="mem_daily_reflection_act", text="–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –¥–Ω—è", emoji="üéØ", action="daily_reflection", row=2),
        NavigationNode(id="mem_overview_nav", text="–û–±–∑–æ—Ä –ø–∞–º—è—Ç–∏", emoji="üóÇÔ∏è", handler="nav_memory_overview", row=3),
        NavigationNode(id="mem_ai_insights_nav", text="AI-–ò–Ω—Å–∞–π—Ç—ã", emoji="üí°", handler="nav_ai_insights", condition="is_premium_or_higher", row=3)
    ]
)
memory_overview_node = NavigationNode(id="memory_overview", text="–û–±–∑–æ—Ä –ø–∞–º—è—Ç–∏", emoji="üóÇÔ∏è")
ai_insights_node = NavigationNode(id="ai_insights", text="AI-–ò–Ω—Å–∞–π—Ç—ã", emoji="üí°", condition="is_premium_or_higher")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
stats_node = NavigationNode(
    id="stats", text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", emoji="üìä",
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    children=[
        NavigationNode(id="stat_general_act", text="–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", emoji="üìä", action="general_stats", row=0),
        NavigationNode(id="stat_diana_act", text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Diana", emoji="üåü", action="diana_stats", persona_specific=['diana', 'all'], row=1),
        NavigationNode(id="stat_madina_act", text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Madina", emoji="üòà", action="madina_stats", persona_specific=['madina', 'all'], row=1),
        NavigationNode(id="stat_conversation_analysis_act", text="–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤", emoji="üí¨", action="conversation_analysis", row=2, condition="is_premium_or_higher"),
        NavigationNode(id="stat_emotion_map_act", text="–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞", emoji="üß†", action="emotion_map", row=2, condition="is_premium_or_higher"),
    ]
)

# –ü—Ä–æ—Ñ–∏–ª—å –∏ –ü–æ–¥–ø–∏—Å–∫–∏
profile_premium_main_node = NavigationNode(
    id="profile_premium_main", text="–ü—Ä–æ—Ñ–∏–ª—å –∏ –ü–æ–¥–ø–∏—Å–∫–∏", emoji="üë§",
    children=[
        NavigationNode(id="profile_view_nav", text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", emoji="üßë", handler="nav_user_profile_view", row=0),
        NavigationNode(id="profile_my_subscription_nav", text="–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", emoji="üíé", handler="nav_my_subscription_view", row=1), # –ò–∑–º–µ–Ω–µ–Ω handler, —á—Ç–æ–±—ã –≤–µ—Å—Ç–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        NavigationNode(id="profile_subscription_plans_nav", text="–¢–∞—Ä–∏—Ñ—ã Premium", emoji="‚≠ê", handler="nav_subscription_plans_view", row=1),
        NavigationNode(id="profile_referral_nav", text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", emoji="üéÅ", handler="nav_referral_dashboard", row=2),
        NavigationNode(id="profile_enter_promocode_act", text="–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", emoji="üéüÔ∏è", action="action_enter_promocode_start", row=2),
    ]
)
user_profile_view_node = NavigationNode(id="user_profile_view", text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", emoji="üßë")
# –£–∑–µ–ª "–¢–∞—Ä–∏—Ñ—ã Premium" —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–ª–∞–Ω—ã
subscription_plans_view_node = NavigationNode(
    id="subscription_plans_view", text="–¢–∞—Ä–∏—Ñ—ã Premium", emoji="‚≠ê",
    children=[
        NavigationNode(id="sub_buy_basic_monthly", text="üíé Basic (–µ–∂–µ–º–µ—Å—è—á–Ω–æ)", action="subscribe_basic_monthly", row=0),
        NavigationNode(id="sub_buy_basic_yearly", text="üíé Basic (–µ–∂–µ–≥–æ–¥–Ω–æ) - –°–∫–∏–¥–∫–∞!", action="subscribe_basic_yearly", row=0),
        NavigationNode(id="sub_buy_premium_monthly", text="üî• Premium (–µ–∂–µ–º–µ—Å—è—á–Ω–æ)", action="subscribe_premium_monthly", row=1),
        NavigationNode(id="sub_buy_premium_yearly", text="üî• Premium (–µ–∂–µ–≥–æ–¥–Ω–æ) - –°–∫–∏–¥–∫–∞!", action="subscribe_premium_yearly", row=1),
        NavigationNode(id="sub_buy_vip_monthly", text="üëë VIP (–µ–∂–µ–º–µ—Å—è—á–Ω–æ)", action="subscribe_vip_monthly", row=2),
        NavigationNode(id="sub_buy_vip_yearly", text="üëë VIP (–µ–∂–µ–≥–æ–¥–Ω–æ) - –°–∫–∏–¥–∫–∞!", action="subscribe_vip_yearly", row=2),
        NavigationNode(id="sub_compare_plans", text="üìä –°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã", action="action_compare_plans", row=3),
    ]
)
my_subscription_view_node = NavigationNode(id="my_subscription_view", text="–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", emoji="üíé") # –≠—Ç–æ—Ç —É–∑–µ–ª –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–Ω—Ñ–æ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
referral_dashboard_node = NavigationNode(id="referral_dashboard", text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", emoji="üéÅ")

# –ü–æ–º–æ—â—å –∏ –°–≤—è–∑—å
help_feedback_main_node = NavigationNode(
    id="help_feedback_main", text="–ü–æ–º–æ—â—å –∏ –°–≤—è–∑—å", emoji="‚ùì",
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    children=[
        NavigationNode(id="help_info_act", text="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É", emoji="üìú", action="show_help_info", row=0),
        NavigationNode(id="help_leave_feedback_act", text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", emoji="üí¨", action="leave_feedback_start", row=0), # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç FSM –¥–ª—è –æ—Ç–∑—ã–≤–∞
    ]
)

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
admin_main_node = NavigationNode(
    id="admin_main", text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å", emoji="üõ†Ô∏è", condition="is_admin",
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    children=[
        NavigationNode(id="admin_nav_analytics_link", text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", handler="nav_admin_analytics_menu", row=0),
        NavigationNode(id="admin_nav_users_link", text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", handler="nav_admin_users_menu", row=0),
        NavigationNode(id="admin_nav_promocodes_link", text="üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã", handler="nav_admin_promocodes_menu", row=1),
        NavigationNode(id="admin_nav_maintenance_link", text="üßπ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", handler="nav_admin_maintenance_menu", row=1),
        NavigationNode(id="admin_act_reload_prompts", text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã", action="admin_reload_all_prompts", row=2),
        NavigationNode(id="admin_act_sys_logs", text="üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏", action="admin_view_system_logs", row=3),
        NavigationNode(id="admin_act_err_report", text="üö® –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö", action="admin_view_error_report", row=3),
        NavigationNode(id="admin_act_adv_settings", text="‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", action="admin_view_advanced_settings", row=4)
    ],
    parent_id_override="main"
)
admin_analytics_menu_node = NavigationNode(id="admin_analytics_menu", text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ê–¥–º–∏–Ω)", emoji="üìà", children=[
    NavigationNode(id="admin_act_view_stats_7d", text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π", action="admin_view_stats_7", row=0),
    NavigationNode(id="admin_act_view_stats_30d", text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π", action="admin_view_stats_30", row=0),
    NavigationNode(id="admin_act_export_csv_30d", text="–≠–∫—Å–ø–æ—Ä—Ç CSV (30–¥)", action="admin_export_analytics_csv_30", row=1),
], parent_id_override="admin_main")
admin_users_menu_node = NavigationNode(id="admin_users_menu", text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–ê–¥–º–∏–Ω)", emoji="üë•", children=[
    NavigationNode(id="admin_act_find_user", text="–ù–∞–π—Ç–∏ –ø–æ ID", action="admin_find_user_start", row=0),
    NavigationNode(id="admin_act_export_users", text="–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", action="admin_export_users_data", row=1),
], parent_id_override="admin_main")
admin_promocodes_menu_node = NavigationNode(id="admin_promocodes_menu", text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ (–ê–¥–º–∏–Ω)", emoji="üéüÔ∏è", children=[
    NavigationNode(id="admin_act_promo_create", text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", action="admin_promocode_create_start", row=0),
    NavigationNode(id="admin_act_promo_list", text="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤", action="admin_promocode_list_view", row=0),
], parent_id_override="admin_main")
admin_maintenance_menu_node = NavigationNode(id="admin_maintenance_menu", text="–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ (–ê–¥–º–∏–Ω)", emoji="üßπ", children=[
    NavigationNode(id="admin_act_cleanup_logs", text="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏", action="admin_cleanup_old_logs", row=0),
    NavigationNode(id="admin_act_clear_cache", text="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Å–∏—Å—Ç–µ–º—ã", action="admin_clear_system_cache", row=0),
], parent_id_override="admin_main")

# –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–∑–ª—ã –¥–ª—è NavigationManager
all_navigation_nodes = [
    main_node, personas_node, current_persona_settings_node, settings_diana_node, settings_madina_node, roleplay_madina_node,
    activities_node, # activities_node —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç act_start_quest_link
    memory_journal_main_node, memory_overview_node, ai_insights_node, stats_node,
    profile_premium_main_node, user_profile_view_node, subscription_plans_view_node, my_subscription_view_node, referral_dashboard_node,
    help_feedback_main_node,
    admin_main_node, admin_analytics_menu_node, admin_users_menu_node, admin_promocodes_menu_node, admin_maintenance_menu_node
]

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä NavigationManager
navigation = NavigationManager(all_navigation_nodes)
