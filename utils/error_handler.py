# utils/error_handler.py
import logging
import traceback
from typing import Optional, Dict, Any, Callable, Type, Union # Added Union
from functools import wraps
from datetime import datetime, timezone, timedelta
import asyncio
import random
import json
from aiogram import types # For type hinting in try_send_error_to_user

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)
# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫ API
api_logger = logging.getLogger('api_errors')

# --- –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ ---

class BotError(Exception):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—à–∏–±–æ–∫, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞.

    Attributes:
        message (str): –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ª–æ–≥–æ–≤ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
        error_code (Optional[str]): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—à–∏–±–∫–∏ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        user_message (Optional[str]): –°–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    def __init__(self, message: str, error_code: Optional[str] = None, user_message: Optional[str] = None):
        super().__init__(message)
        self.error_code = error_code
        self.user_message = user_message or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

class APIError(BotError):
    """–û—à–∏–±–∫–∞, –≤–æ–∑–Ω–∏–∫–∞—é—â–∞—è –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API (LLM, TTS –∏ —Ç.–¥.)."""
    pass

class DatabaseError(BotError):
    """–û—à–∏–±–∫–∞, –≤–æ–∑–Ω–∏–∫–∞—é—â–∞—è –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    pass

class ValidationError(BotError):
    """–û—à–∏–±–∫–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    pass

class ConfigurationError(BotError):
    """–û—à–∏–±–∫–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∞—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    pass

class RateLimitError(APIError):
    """–û—à–∏–±–∫–∞ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–Ω–µ—à–Ω–µ–º—É API."""
    def __init__(self, message: str = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API.",
                 error_code: str = 'RATE_LIMIT_EXCEEDED',
                 user_message: Optional[str] = None):
        super().__init__(
            message,
            error_code,
            user_message or "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

class InsufficientPermissionsError(BotError):
    """–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–∞–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è."""
    def __init__(self, message: str = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
                 error_code: str = 'INSUFFICIENT_PERMISSIONS',
                 user_message: Optional[str] = None):
        super().__init__(
            message,
            error_code,
            user_message or "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."
        )

# --- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---

class ErrorHandler:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫. –õ–æ–≥–∏—Ä—É–µ—Ç, —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É,
    –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    
    def __init__(self, app_config: Optional[Any] = None):
        self.error_stats: Dict[str, Any] = {
            'total_errors': 0, 'api_errors': 0, 'database_errors': 0,
            'validation_errors': 0, 'configuration_errors': 0,
            'rate_limit_errors': 0, 'unknown_errors': 0,
            'last_error_at': None, 'last_reset_at': datetime.now(timezone.utc)
        }
        
        self.user_messages_map: Dict[str, str] = {
            'APIError': "ü§ñ –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –≤–Ω–µ—à–Ω–µ–º—É AI-—Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É!",
            'DatabaseError': "üíæ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–æ –æ–ø–µ—Ä–∞—Ü–∏—è –º–æ–≥–ª–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è.",
            'ValidationError': "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
            'RateLimitError': "‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            'ConfigurationError': "‚öôÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.",
            'InsufficientPermissionsError': "üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.",
            'TimeoutError': "‚åõ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            'default': "üòµ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è –≤ –ø—Ä–∏—á–∏–Ω–µ!"
        }
        self.config = app_config

    def log_error(self,
                  error: Exception,
                  context: Optional[Dict[str, Any]] = None,
                  user_id: Optional[Union[int, str]] = None,
                  severity: str = 'ERROR') -> str:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ—à–∏–±–∫–∏.
        """
        timestamp_now = datetime.now(timezone.utc)
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –æ—à–∏–±–∫–∏, –≤–∫–ª—é—á–∞—é—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏ —Ö—ç—à –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        error_id = f"ERR_{timestamp_now.strftime('%Y%m%d_%H%M%S_%f')}_{hash(str(error) + str(context)) % 1000000:06d}"
        
        error_info = {
            'error_id': error_id, 'error_type': type(error).__name__,
            'error_message': str(error), 'user_id': user_id,
            'context': context or {}, 'timestamp': timestamp_now.isoformat(),
            'traceback': traceback.format_exc(limit=10) # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç—Ä–µ–π—Å–±–µ–∫–∞
        }
        
        self.error_stats['total_errors'] += 1
        self.error_stats['last_error_at'] = error_info['timestamp']
        
        log_message_parts = [
            f"Error Logged [{error_id}]",
            f"User={user_id}" if user_id else "",
            f"Type={error_info['error_type']}",
            f"Msg='{error_info['error_message']}'"
        ]
        if context:
            try:
                context_str = json.dumps(context, default=str, ensure_ascii=False, indent=None)
                log_message_parts.append(f"Context={context_str}")
            except TypeError:
                log_message_parts.append(f"Context_Type_Error (unable_to_serialize)")

        log_message = ", ".join(filter(None, log_message_parts))

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
        if isinstance(error, RateLimitError): self.error_stats['rate_limit_errors'] += 1
        if isinstance(error, APIError): self.error_stats['api_errors'] += 1
        elif isinstance(error, DatabaseError): self.error_stats['database_errors'] += 1
        elif isinstance(error, ValidationError): self.error_stats['validation_errors'] += 1
        elif isinstance(error, ConfigurationError): self.error_stats['configuration_errors'] += 1
        else: self.error_stats['unknown_errors'] += 1
        
        target_logger = api_logger if isinstance(error, APIError) and api_logger.handlers else logger
        log_func_to_call = getattr(target_logger, severity.lower(), target_logger.error)
        # –ü–µ—Ä–µ–¥–∞–µ–º exc_info=False, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–π—Å–±–µ–∫ —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ error_info['traceback']
        # –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ extra –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.
        # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –∏–ª–∏ —Ñ–∞–π–ª, traceback.format_exc() –≤ error_info —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω.
        log_func_to_call(log_message, extra=error_info) 

        # TODO: [P2] –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ CRITICAL –æ—à–∏–±–∫–∞—Ö (self.notify_admins) - –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        return error_id
    
    def get_user_friendly_message(self, error: Exception) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if isinstance(error, BotError) and error.user_message:
            return error.user_message
        error_type_name = type(error).__name__
        if isinstance(error, asyncio.TimeoutError):
            error_type_name = 'TimeoutError'
        return self.user_messages_map.get(error_type_name, self.user_messages_map['default'])
    
    def get_error_stats(self) -> Dict[str, Any]:
        return self.error_stats.copy()
    
    def reset_error_stats(self):
        self.error_stats = {
            'total_errors': 0, 'api_errors': 0, 'database_errors': 0,
            'validation_errors': 0, 'configuration_errors': 0,
            'rate_limit_errors': 0, 'unknown_errors': 0,
            'last_error_at': None, 'last_reset_at': datetime.now(timezone.utc)
        }
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ —Å–±—Ä–æ—à–µ–Ω–∞.")

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ---
def handle_errors(
    log_level: str = "ERROR", 
    reraise_as: Optional[Type[BotError]] = None,
    default_user_message: Optional[str] = None,
    send_to_user: bool = True
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    """
    def decorator(func: Callable):
        async def get_error_handler_instance(args, kwargs) -> ErrorHandler:
            # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ErrorHandler
            eh_instance = kwargs.get('error_handler_instance')
            if isinstance(eh_instance, ErrorHandler): return eh_instance
            if args and hasattr(args[0], 'error_handler') and isinstance(args[0].error_handler, ErrorHandler):
                return args[0].error_handler
            if args and hasattr(args[0], 'bot_instance') and hasattr(args[0].bot_instance, 'error_handler') and isinstance(args[0].bot_instance.error_handler, ErrorHandler):
                 return args[0].bot_instance.error_handler
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä, –µ—Å–ª–∏ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ
            # –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω —á–µ—Ä–µ–∑ DI –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ (–º–µ–Ω–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ)
            # global_error_handler_module_level = globals().get('error_handler') # –ï—Å–ª–∏ –±—ã –æ–Ω –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ
            # if isinstance(global_error_handler_module_level, ErrorHandler): return global_error_handler_module_level

            logger.warning("–≠–∫–∑–µ–º–ø–ª—è—Ä ErrorHandler –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π. "
                           "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å error_handler —è–≤–Ω–æ –∏–ª–∏ —á–µ—Ä–µ–∑ DI.")
            return ErrorHandler() 

        async def try_send_error_to_user(target_event: Any, message_text: str, user_id_for_log: Any):
            """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
            if not target_event: return
            target_to_answer: Optional[Union[types.Message, types.CallbackQuery]] = None
            if isinstance(target_event, types.Message):
                target_to_answer = target_event
            elif isinstance(target_event, types.CallbackQuery):
                # –î–ª—è CallbackQuery –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ .message, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç.
                # –ò–Ω–∞—á–µ, –µ—Å–ª–∏ .message –Ω–µ—Ç, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–∞–º callback (–≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ).
                target_to_answer = target_event.message if target_event.message else target_event
            
            if hasattr(target_to_answer, 'answer') and callable(target_to_answer.answer):
                try:
                    if isinstance(target_event, types.CallbackQuery) and not target_event.message:
                        # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è CallbackQuery –±–µ–∑ message
                        await target_event.answer(message_text.split('\n')[0][:200], show_alert=True) # –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    elif target_to_answer: # –î–ª—è Message –∏–ª–∏ CallbackQuery.message
                         await target_to_answer.answer(message_text, parse_mode="Markdown")
                except Exception as send_err:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_for_log}: {send_err}")
            else:
                logger.warning(f"–û–±—ä–µ–∫—Ç {type(target_event)} –Ω–µ –∏–º–µ–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ 'answer' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ.")

        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            current_eh = await get_error_handler_instance(args, kwargs)
            user_id_ctx: Optional[Union[int, str]] = None
            event_ctx: Optional[Any] = None 
            
            if args:
                first_arg = args[0]
                if isinstance(first_arg, (types.Message, types.CallbackQuery)):
                    event_ctx = first_arg
                    if first_arg.from_user: user_id_ctx = first_arg.from_user.id
                elif len(args) > 1 and isinstance(args[1], (types.Message, types.CallbackQuery)):
                    event_ctx = args[1]
                    if event_ctx.from_user: user_id_ctx = event_ctx.from_user.id
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                log_ctx = {'function': func.__name__}
                try: # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                    log_ctx['args_preview'] = [str(a)[:100] for a in args] 
                    log_ctx['kwargs_preview'] = {k: str(v)[:100] for k, v in kwargs.items()}
                except Exception: log_ctx['args_preview'] = "Error serializing args"
                
                error_id = current_eh.log_error(e, context=log_ctx, user_id=user_id_ctx, severity=log_level.upper())
                user_msg_for_display = default_user_message or current_eh.get_user_friendly_message(e)
                final_user_msg = f"{user_msg_for_display}\n–ö–æ–¥ –æ—à–∏–±–∫–∏: `{error_id}`"

                if send_to_user and event_ctx:
                    await try_send_error_to_user(event_ctx, final_user_msg, user_id_ctx)
                
                if reraise_as:
                    raise reraise_as(
                        f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}. Original: {type(e).__name__}. ID: {error_id}",
                        error_code=getattr(e, 'error_code', type(e).__name__.upper() + '_IN_FUNC'),
                        user_message=user_msg_for_display 
                    ) from e
                return None # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞.
            # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ErrorHandler –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π.
            current_eh_sync: ErrorHandler = kwargs.get('error_handler_instance')
            if not isinstance(current_eh_sync, ErrorHandler):
                 # global_eh_sync = globals().get('error_handler') # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
                 # if isinstance(global_eh_sync, ErrorHandler): current_eh_sync = global_eh_sync
                 # else: current_eh_sync = ErrorHandler()
                 current_eh_sync = ErrorHandler() # –í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã

            user_id_ctx_sync: Optional[Union[int, str]] = None
            # ... (–ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user_id –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ) ...
            try:
                return func(*args, **kwargs)
            except Exception as e:
                log_ctx_sync = {'function': func.__name__}
                error_id = current_eh_sync.log_error(e, context=log_ctx_sync, user_id=user_id_ctx_sync, severity=log_level.upper())
                user_msg = default_user_message or current_eh_sync.get_user_friendly_message(e)
                logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è {func.__name__} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π {error_id}. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ): {user_msg}")
                if reraise_as:
                    raise reraise_as(
                        f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}. Original: {type(e).__name__}. ID: {error_id}",
                        error_code=getattr(e, 'error_code', type(e).__name__.upper() + '_IN_FUNC'),
                        user_message=user_msg
                    ) from e
                return None
        
        return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper
    return decorator

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ API —Å —Ä–µ—Ç—Ä–∞—è–º–∏ ---
async def safe_api_call(
    api_func: Callable[..., Any],
    error_handler_instance: ErrorHandler, 
    max_retries: int = 3,
    initial_retry_delay_seconds: float = 1.0,
    max_retry_delay_seconds: float = 30.0,
    *args: Any,
    **kwargs: Any
) -> Any:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ API —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.
    """
    last_exception: Optional[Exception] = None
    
    for attempt in range(max_retries):
        try:
            if asyncio.iscoroutinefunction(api_func):
                result = await api_func(*args, **kwargs)
            else:
                result = await asyncio.to_thread(api_func, *args, **kwargs)
            return result
            
        except Exception as e:
            last_exception = e
            error_str_lower = str(e).lower()
            
            non_retryable_http_codes = ['400', '401', '403', '404', 'bad request', 'unauthorized', 'forbidden', 'not found']
            is_non_retryable_bot_error = isinstance(e, (ValidationError, ConfigurationError, InsufficientPermissionsError)) or \
                                         (hasattr(e, 'error_code') and isinstance(e.error_code, str) and \
                                          any(phrase in e.error_code.lower() for phrase in ['auth', 'validation', 'permission', 'bad_request']))
            contains_non_retryable_phrase = any(phrase in error_str_lower for phrase in non_retryable_http_codes)

            if is_non_retryable_bot_error or contains_non_retryable_phrase:
                logger.warning(f"–ù–µ–ø–æ–≤—Ç–æ—Ä—è–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API '{api_func.__name__}' (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {type(e).__name__} - {e}")
                break 
            
            logger.warning(
                f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ API '{api_func.__name__}' (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}), –ø–æ–≤—Ç–æ—Ä... –û—à–∏–±–∫–∞: {type(e).__name__} - {e}"
            )
            if attempt < max_retries - 1:
                delay = min(
                    initial_retry_delay_seconds * (2 ** attempt) + (random.uniform(0.1, 0.5) * initial_retry_delay_seconds),
                    max_retry_delay_seconds
                )
                await asyncio.sleep(delay)
            else: 
                logger.error(f"–í—ã–∑–æ–≤ API '{api_func.__name__}' –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.")
    
    final_error_message = f"API call to '{api_func.__name__}' failed after {max_retries} attempts."
    if last_exception:
        final_error_message += f" Last error: {type(last_exception).__name__} - {last_exception}"

    error_id = error_handler_instance.log_error(
        last_exception if last_exception else APIError(final_error_message, error_code='API_CALL_MAX_RETRIES'),
        context={'function': api_func.__name__, 'attempts': max_retries, 
                 'args_preview': str(args)[:100], 'kwargs_preview': str(kwargs)[:100]},
        severity='ERROR'
    )
    user_msg_for_final_error = error_handler_instance.get_user_friendly_message(
        last_exception if last_exception else APIError("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
    )
    user_msg_with_id = f"{user_msg_for_final_error} (–ö–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {error_id})"

    raise APIError(
        message=final_error_message,
        error_code=getattr(last_exception, 'error_code', 'API_CALL_FAILED'),
        user_message=user_msg_with_id
    ) from last_exception

# --- –ü–∞—Ç—Ç–µ—Ä–Ω "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å" (Circuit Breaker) ---
class CircuitBreaker:
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å" (Circuit Breaker).
    """
    STATE_CLOSED = "CLOSED"
    STATE_OPEN = "OPEN"
    STATE_HALF_OPEN = "HALF_OPEN"

    def __init__(self,
                 name: str,
                 failure_threshold: int = 5,
                 recovery_timeout_seconds: int = 60,
                 half_open_success_threshold: int = 2,
                 error_handler_instance: Optional[ErrorHandler] = None):
        self.name = name
        self.failure_threshold = failure_threshold
        self.recovery_timeout_seconds = recovery_timeout_seconds
        self.half_open_success_threshold = half_open_success_threshold
        self.error_handler = error_handler_instance
        
        self._state = self.STATE_CLOSED
        self._failure_count = 0
        self._success_count_half_open = 0
        self._last_failure_time: Optional[datetime] = None
        self._lock = asyncio.Lock()

        logger.info(f"CircuitBreaker '{self.name}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: failure_threshold={failure_threshold}, "
                    f"recovery_timeout={recovery_timeout_seconds}s, half_open_success_threshold={half_open_success_threshold}")

    @property
    async def state(self) -> str:
        async with self._lock:
            if self._state == self.STATE_OPEN and self._last_failure_time:
                if (datetime.now(timezone.utc) - self._last_failure_time) > timedelta(seconds=self.recovery_timeout_seconds):
                    logger.info(f"CircuitBreaker '{self.name}': –¢–∞–π–º–∞—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫. –ü–µ—Ä–µ—Ö–æ–¥ –≤ HALF_OPEN.")
                    self._state = self.STATE_HALF_OPEN
                    self._success_count_half_open = 0
            return self._state

    async def call(self, func: Callable[..., Any], *args: Any, **kwargs: Any) -> Any:
        current_cb_state = await self.state

        if current_cb_state == self.STATE_OPEN:
            logger.warning(f"CircuitBreaker '{self.name}' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ OPEN. –í—ã–∑–æ–≤ {func.__name__} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
            raise APIError(
                f"–°–µ—Ä–≤–∏—Å '{self.name}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Circuit Breaker –æ—Ç–∫—Ä—ã—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                error_code='CIRCUIT_OPEN',
                user_message=f"–°–µ—Ä–≤–∏—Å '{self.name}' —Å–µ–π—á–∞—Å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
        
        try:
            if asyncio.iscoroutinefunction(func):
                result = await func(*args, **kwargs)
            else:
                result = await asyncio.to_thread(func, *args, **kwargs)
            await self._on_success()
            return result
        except Exception as e:
            if self.error_handler:
                self.error_handler.log_error(
                    e, context={'cb_name': self.name, 'cb_state_before_failure': current_cb_state, 'func_name': func.__name__},
                    severity='WARNING'
                )
            else:
                logger.warning(f"CircuitBreaker '{self.name}': –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ {func.__name__} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_cb_state}: {e}", exc_info=True)
            await self._on_failure()
            raise 

    async def _on_success(self):
        async with self._lock:
            if self._state == self.STATE_HALF_OPEN:
                self._success_count_half_open += 1
                if self._success_count_half_open >= self.half_open_success_threshold:
                    self._state = self.STATE_CLOSED; self._failure_count = 0; self._success_count_half_open = 0
                    logger.info(f"CircuitBreaker '{self.name}': –£—Å–ø–µ—à–Ω—ã–µ –≤—ã–∑–æ–≤—ã –≤ HALF_OPEN. –¶–µ–ø—å –ó–ê–ú–ö–ù–£–¢–ê (CLOSED).")
                else:
                    logger.info(f"CircuitBreaker '{self.name}': –£—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤ –≤ HALF_OPEN ({self._success_count_half_open}/{self.half_open_success_threshold}).")
            elif self._state == self.STATE_CLOSED and self._failure_count > 0:
                 logger.debug(f"CircuitBreaker '{self.name}': –£—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤ –≤ CLOSED –ø–æ—Å–ª–µ {self._failure_count} –æ—à–∏–±–æ–∫. –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–±—Ä–æ—à–µ–Ω.")
                 self._failure_count = 0

    async def _on_failure(self):
        async with self._lock:
            if self._state == self.STATE_HALF_OPEN:
                logger.warning(f"CircuitBreaker '{self.name}': –û—à–∏–±–∫–∞ –≤ HALF_OPEN. –¶–µ–ø—å —Å–Ω–æ–≤–∞ –†–ê–ó–û–ú–ö–ù–£–¢–ê (OPEN).")
                self._state = self.STATE_OPEN; self._last_failure_time = datetime.now(timezone.utc)
                self._failure_count = self.failure_threshold; self._success_count_half_open = 0
            elif self._state == self.STATE_CLOSED:
                self._failure_count += 1; self._last_failure_time = datetime.now(timezone.utc)
                if self._failure_count >= self.failure_threshold:
                    self._state = self.STATE_OPEN
                    logger.warning(f"CircuitBreaker '{self.name}': –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –æ—à–∏–±–æ–∫ ({self._failure_count}/{self.failure_threshold}). –¶–µ–ø—å –†–ê–ó–û–ú–ö–ù–£–¢–ê (OPEN).")
                else:
                    logger.info(f"CircuitBreaker '{self.name}': –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞ –≤ CLOSED ({self._failure_count}/{self.failure_threshold}).")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Circuit Breaker (–ª—É—á—à–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤ main.py —Å –ø–µ—Ä–µ–¥–∞—á–µ–π error_handler –∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤)
gemini_circuit_breaker = CircuitBreaker(name="GeminiAPI_CB", failure_threshold=3, recovery_timeout_seconds=45)
minimax_circuit_breaker = CircuitBreaker(name="MinimaxTTS_API_CB", failure_threshold=4, recovery_timeout_seconds=90)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π error_handler (–∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω, –ª—É—á—à–µ DI)
# error_handler = ErrorHandler()
