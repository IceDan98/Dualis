#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI Companion Bot
"""
import sys
import os
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

async def test_bot_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò AI COMPANION BOT")
    print("=" * 60)
    
    errors = []
    passed = 0
    total = 0
    
    # === –¢–ï–°–¢ 1: –ò–ú–ü–û–†–¢ –ú–û–î–£–õ–ï–ô ===
    print("\nüì¶ –¢–ï–°–¢ 1: –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π")
    
    modules_to_test = [
        ('config.settings', 'load_config'),
        ('config.prompts', 'prompt_manager'),
        ('database.operations', 'DatabaseService'),
        ('database.models', 'Base'),
        ('services.llm_service', 'LLMService'),
        ('services.context_manager', 'ContextManager'),
        ('services.memory_service', 'MemoryService'),
        ('services.subscription_system', 'SubscriptionService'),
        ('services.tts_service', 'TTSService'),
        ('utils.navigation', 'navigation'),
        ('utils.navigation_system', 'NavigationSystem'),
        ('utils.token_counter', 'token_counter'),
        ('utils.error_handler', 'error_handler'),
        ('handlers.navigation_handlers', 'nav_router'),
        ('main', 'AICompanionBot')
    ]
    
    for module_name, class_name in modules_to_test:
        total += 1
        try:
            module = __import__(module_name, fromlist=[class_name])
            getattr(module, class_name)
            print(f"  ‚úÖ {module_name}.{class_name}")
            passed += 1
        except Exception as e:
            print(f"  ‚ùå {module_name}.{class_name}: {e}")
            errors.append(f"–ò–º–ø–æ—Ä—Ç {module_name}.{class_name}: {e}")
    
    # === –¢–ï–°–¢ 2: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
    print("\n‚öôÔ∏è –¢–ï–°–¢ 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    total += 1
    try:
        from config.settings import load_config
        config = load_config()
        
        if config.telegram_bot_token and config.gemini_api_key:
            print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏")
            passed += 1
        else:
            print("  ‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ .env (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)")
            passed += 1
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        errors.append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {e}")
    
    # === –¢–ï–°–¢ 3: –ü–†–û–ú–ü–¢–´ ===
    print("\nüìù –¢–ï–°–¢ 3: –ü—Ä–æ–º–ø—Ç—ã –ø–µ—Ä—Å–æ–Ω")
    total += 1
    try:
        from config.prompts import prompt_manager
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤
        prompts_dir = project_root / "personas"
        aeris_file = prompts_dir / "aeris.txt"
        luneth_file = prompts_dir / "luneth.txt"
        
        if aeris_file.exists() and luneth_file.exists():
            if prompt_manager.validate_prompts():
                print("  ‚úÖ –ü—Ä–æ–º–ø—Ç—ã Aeris –∏ Luneth –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –≤–∞–ª–∏–¥–Ω—ã")
                print(f"    Aeris: {len(prompt_manager.get_prompt('aeris'))} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"    Luneth: {len(prompt_manager.get_prompt('luneth'))} —Å–∏–º–≤–æ–ª–æ–≤")
                passed += 1
            else:
                print("  ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤")
                errors.append("–ü—Ä–æ–º–ø—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
        else:
            print(f"  ‚ùå –§–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:")
            print(f"    Aeris: {aeris_file.exists()}")
            print(f"    Luneth: {luneth_file.exists()}")
            errors.append("–§–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        errors.append(f"–ü—Ä–æ–º–ø—Ç—ã: {e}")
    
    # === –¢–ï–°–¢ 4: –°–ò–°–¢–ï–ú–ê –ù–ê–í–ò–ì–ê–¶–ò–ò ===
    print("\nüß≠ –¢–ï–°–¢ 4: –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    total += 1
    try:
        from utils.navigation import navigation
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_menu = navigation.get_menu('main', current_persona='aeris')
        aeris_settings = navigation.get_menu('aeris_settings', current_vibe='friend')
        luneth_settings = navigation.get_menu('luneth_settings', current_level=5)
        quick_actions = navigation.create_quick_actions_menu('aeris')
        
        print(f"  ‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {len(main_menu.inline_keyboard)} —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫")
        print(f"  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Aeris: {len(aeris_settings.inline_keyboard)} —Å—Ç—Ä–æ–∫")
        print(f"  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Luneth: {len(luneth_settings.inline_keyboard)} —Å—Ç—Ä–æ–∫")
        print(f"  ‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {len(quick_actions.inline_keyboard)} —Å—Ç—Ä–æ–∫")
        passed += 1
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
        errors.append(f"–ù–∞–≤–∏–≥–∞—Ü–∏—è: {e}")
    
    # === –¢–ï–°–¢ 5: –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
    print("\nüóÑÔ∏è –¢–ï–°–¢ 5: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    total += 1
    try:
        from database.operations import DatabaseService
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = DatabaseService("sqlite:///test_integration.db")
        await db.initialize()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        test_user = await db.get_or_create_user(
            telegram_id=12345,
            username="test_user",
            first_name="Test"
        )
        
        conversation = await db.get_or_create_conversation(test_user.id, 'aeris')
        
        message = await db.save_message(
            conversation_id=conversation.id,
            role='user',
            content='–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            tokens_count=10
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        settings = await db.get_conversation_settings(test_user.id, 'aeris')
        
        await db.close()
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        test_db_file = project_root / "test_integration.db"
        if test_db_file.exists():
            test_db_file.unlink()
        
        print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–∞–∑–≥–æ–≤–æ—Ä")
        print(f"  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {settings}")
        passed += 1
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        errors.append(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # === –¢–ï–°–¢ 6: –°–ò–°–¢–ï–ú–ê –ü–û–î–ü–ò–°–û–ö ===
    print("\nüíé –¢–ï–°–¢ 6: –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫")
    total += 1
    try:
        from services.subscription_system import SubscriptionService, SubscriptionTier, SubscriptionMiddleware
        from database.operations import DatabaseService
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
        db = DatabaseService("sqlite:///test_sub.db")
        await db.initialize()
        
        sub_service = SubscriptionService(db)
        middleware = SubscriptionMiddleware(sub_service)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription = await sub_service.get_user_subscription(67890)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤
        limit_check = await sub_service.check_message_limit(67890)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
        luneth_access = await sub_service.check_luneth_level_access(67890, 10)
        
        await db.close()
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        test_sub_file = project_root / "test_sub.db"
        if test_sub_file.exists():
            test_sub_file.unlink()
        
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {subscription['tier']}")
        print(f"  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤: {limit_check['limit']} —Å–æ–æ–±—â–µ–Ω–∏–π")
        print(f"  ‚úÖ –î–æ—Å—Ç—É–ø –∫ Luneth lvl 10: {luneth_access}")
        passed += 1
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        errors.append(f"–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    # === –¢–ï–°–¢ 7: –°–¢–†–£–ö–¢–£–†–ê –§–ê–ô–õ–û–í ===
    print("\nüìÅ –¢–ï–°–¢ 7: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    total += 1
    
    required_files = [
        "main.py",
        ".env",
        "requirements.txt",
        "config/__init__.py",
        "config/settings.py",
        "config/prompts.py",
        "database/__init__.py",
        "database/models.py",
        "database/operations.py",
        "services/__init__.py",
        "services/llm_service.py",
        "services/memory_service.py",
        "services/context_manager.py",
        "services/subscription_system.py",
        "utils/__init__.py",
        "utils/navigation.py",
        "utils/navigation_system.py",
        "utils/error_handler.py",
        "utils/token_counter.py",
        "handlers/__init__.py",
        "handlers/navigation_handlers.py",
        "personas/diana.txt",
        "personas/madina.txt"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not (project_root / file_path).exists():
            missing_files.append(file_path)
    
    if not missing_files:
        print(f"  ‚úÖ –í—Å–µ {len(required_files)} —Ñ–∞–π–ª–æ–≤ –Ω–∞ –º–µ—Å—Ç–µ")
        passed += 1
    else:
        print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {missing_files}")
    
    # === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    
    success_rate = (passed / total) * 100 if total > 0 else 0
    
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total} ({success_rate:.1f}%)")
    
    if errors:
        print(f"‚ùå –û—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω–æ: {len(errors)}")
        print("\nüö® –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:")
        for i, error in enumerate(errors, 1):
            print(f"  {i}. {error}")
    
    print(f"\nüéØ –°–¢–ê–¢–£–° –ü–†–û–ï–ö–¢–ê:")
    if success_rate >= 90:
        print("  üéâ –û–¢–õ–ò–ß–ù–û! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        status = "READY"
    elif success_rate >= 75:
        print("  ‚úÖ –•–û–†–û–®–û! –¢—Ä–µ–±—É—é—Ç—Å—è –º–∏–Ω–æ—Ä–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        status = "MINOR_FIXES"
    elif success_rate >= 50:
        print("  ‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –¢—Ä–µ–±—É—é—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        status = "MAJOR_FIXES"
    else:
        print("  ‚ùå –ö–†–ò–¢–ò–ß–ù–û! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        status = "CRITICAL"
    
    # === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===
    print(f"\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    
    if status == "READY":
        print("  1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: python main.py")
        print("  2. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram")
        print("  3. üìä –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print("  4. üí∞ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é")
    
    elif status in ["MINOR_FIXES", "MAJOR_FIXES"]:
        print("  1. üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")
        print("  2. üìù –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã")
        print("  3. üß™ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("  4. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    
    else:
        print("  1. üõ†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
        print("  2. üìö –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
        print("  3. üîÑ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞")
    
    print(f"\nüí° BUSINESS PLAN –°–¢–ê–¢–£–°:")
    print("  ‚úÖ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    print("  ‚úÖ Freemium –º–æ–¥–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    print("  ‚úÖ Telegram Stars –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
    print("  üìà ROI –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: –≤—ã—Å–æ–∫–∏–π")
    
    return success_rate >= 75

if __name__ == "__main__":
    print("ü§ñ AI Companion Bot - Integration Test")
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    try:
        success = asyncio.run(test_bot_integration())
        
        if success:
            print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        sys.exit(1)